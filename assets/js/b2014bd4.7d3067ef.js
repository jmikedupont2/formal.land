"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[6640],{7519:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var n=t(4848),r=t(8453);const s={id:"introduction",title:"What is coq-of-rust"},i=void 0,l={id:"coq-of-rust/introduction",title:"What is coq-of-rust",description:"coq-of-rust is a transpiler from the \ud83e\udd80&nbsp;Rust programming language to the \ud83d\udc13&nbsp;Coq proof language. It allows formal verification on Rust programs. You can download it from GitHub.",source:"@site/docs/coq-of-rust/introduction.md",sourceDirName:"coq-of-rust",slug:"/coq-of-rust/introduction",permalink:"/docs/coq-of-rust/introduction",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"introduction",title:"What is coq-of-rust"},sidebar:"sidebar",previous:{title:"\ud83d\udcdc Press",permalink:"/docs/company/press"},next:{title:"What is coq-of-ocaml",permalink:"/docs/coq-of-ocaml/introduction"}},c={},a=[{value:"Example",id:"example",level:2},{value:"Workflow",id:"workflow",level:2}];function d(e){const o={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.a,{href:"https://github.com/formal-land/coq-of-rust",children:(0,n.jsx)(o.strong,{children:"coq-of-rust"})})," is a transpiler from the ",(0,n.jsx)(o.a,{href:"https://www.rust-lang.org/",children:"\ud83e\udd80\xa0Rust"})," programming language to the ",(0,n.jsx)(o.a,{href:"https://coq.inria.fr/",children:"\ud83d\udc13\xa0Coq"})," proof language. It allows ",(0,n.jsx)(o.strong,{children:"formal verification"})," on Rust programs. You can download it from ",(0,n.jsx)(o.a,{href:"https://github.com/formal-land/coq-of-rust",children:"GitHub"}),"."]}),"\n",(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.code,{children:"coq-of-rust"})," generates a ",(0,n.jsx)(o.a,{href:"https://cstheory.stackexchange.com/questions/1370/shallow-versus-deep-embeddings",children:"shallow embedding"})," of Rust into Coq. We run the translation from the ",(0,n.jsx)(o.a,{href:"https://rustc-dev-guide.rust-lang.org/thir.html",children:"THIR"})," level of the Rust compiler. The generated Coq code is more verbose than the source Rust as we explicit all the low-level details, such as the sequencing of effects or the implicit borrowing/dereferencing."]}),"\n",(0,n.jsx)(o.admonition,{title:"Services",type:"tip",children:(0,n.jsxs)(o.p,{children:["If you want to formally verify Rust programs, contact us at\xa0",(0,n.jsx)(o.a,{href:"mailto:contact@formal.land",children:"contact@formal.land"}),"!"]})}),"\n",(0,n.jsx)(o.h2,{id:"example",children:"Example"}),"\n",(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.code,{children:"coq-of-rust"})," translates the Rust code:"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-rust",children:"fn balance_of(&self, owner: AccountId) -> Balance {\n    self.balance_of_impl(&owner)\n}\n"})}),"\n",(0,n.jsx)(o.p,{children:"to the Coq code:"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-coq",children:'(* Generated by coq-of-rust *)\nDefinition balance_of\n    (self : ref ltac:(Self))\n    (owner : erc20.AccountId.t)\n    : M ltac:(erc20.Balance) :=\n  let* self : M.Val (ref ltac:(Self)) := M.alloc self in\n  let* owner : M.Val erc20.AccountId.t := M.alloc owner in\n  let* \u03b10 : ref erc20.Erc20.t := M.read self in\n  erc20.Erc20.t::["balance_of_impl"] \u03b10 (borrow owner).\n'})}),"\n",(0,n.jsx)(o.h2,{id:"workflow",children:"Workflow"}),"\n",(0,n.jsxs)(o.p,{children:["To formally verify a Rust project using ",(0,n.jsx)(o.code,{children:"coq-of-rust"})," we work as follows:"]}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsxs)(o.li,{children:["translate the Rust code to Coq using ",(0,n.jsx)(o.code,{children:"coq-of-rust"})]}),"\n",(0,n.jsx)(o.li,{children:"define the memory of the program (how the values will be allocated)"}),"\n",(0,n.jsx)(o.li,{children:"write simulation functions for each function of the Rust code, to give a simpler and more functional definition of the code"}),"\n",(0,n.jsx)(o.li,{children:"verify that these simulations are equivalent to the source code"}),"\n",(0,n.jsx)(o.li,{children:"prove properties over these simulations"}),"\n"]}),"\n",(0,n.jsxs)(o.p,{children:["As some of the work is very verbose and repetitive, such as the definition of the simulation functions, but thankfully generative AI tools such as ",(0,n.jsx)(o.a,{href:"https://github.com/features/copilot",children:"Github Copilot"})," are better and better at code generation."]})]})}function u(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>i,x:()=>l});var n=t(6540);const r={},s=n.createContext(r);function i(e){const o=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:o},e.children)}}}]);