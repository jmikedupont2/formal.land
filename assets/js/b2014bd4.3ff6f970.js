"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[663],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=s(r),m=o,d=f["".concat(c,".").concat(m)]||f[m]||p[m]||a;return r?n.createElement(d,i(i({ref:t},u),{},{components:r})):n.createElement(d,i({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5722:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return f}});var n=r(3117),o=r(102),a=(r(7294),r(3905)),i=["components"],l={id:"introduction",title:"What is coq-of-rust"},c=void 0,s={unversionedId:"coq-of-rust/introduction",id:"coq-of-rust/introduction",title:"What is coq-of-rust",description:"coq-of-rust is a transpiler from the \ud83e\udd80&nbsp;Rust programming language to the \ud83d\udc13&nbsp;Coq proof language. It allows formal verification on Rust programs. The sources are on Github.",source:"@site/docs/coq-of-rust/introduction.md",sourceDirName:"coq-of-rust",slug:"/coq-of-rust/introduction",permalink:"/docs/coq-of-rust/introduction",tags:[],version:"current",frontMatter:{id:"introduction",title:"What is coq-of-rust"},sidebar:"sidebar",previous:{title:"Faq",permalink:"/docs/coq-of-ocaml/faq"}},u=[{value:"Example",id:"example",children:[],level:2},{value:"Workflow",id:"workflow",children:[],level:2}],p={toc:u};function f(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/formal-land/coq-of-rust"},(0,a.kt)("strong",{parentName:"a"},"coq-of-rust"))," is a transpiler from the ",(0,a.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/"},"\ud83e\udd80","\xa0","Rust")," programming language to the ",(0,a.kt)("a",{parentName:"p",href:"https://coq.inria.fr/"},"\ud83d\udc13","\xa0","Coq")," proof language. It allows ",(0,a.kt)("strong",{parentName:"p"},"formal verification")," on Rust programs. The sources are on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/formal-land/coq-of-rust"},"Github"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"coq-of-rust")," generates a ",(0,a.kt)("a",{parentName:"p",href:"https://cstheory.stackexchange.com/questions/1370/shallow-versus-deep-embeddings"},"shallow embedding")," of Rust into Coq. We run the translation from the ",(0,a.kt)("a",{parentName:"p",href:"https://rustc-dev-guide.rust-lang.org/thir.html"},"THIR")," level of the Rust compiler. The generated Coq code is more verbose than the source Rust as we explicit all the low-level details, such as the sequencing of effects or the implicit borrowing/dereferencing."),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Purchase")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"If you want to formally verify Rust programs, contact us at","\xa0",(0,a.kt)("a",{parentName:"p",href:"mailto:contact@formal.land"},"c","o","n","t","a","c","t","@","formal",".","l","a","n","d"),"!"))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"coq-of-rust")," translates the Rust code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn balance_of(&self, owner: AccountId) -> Balance {\n    self.balance_of_impl(&owner)\n}\n")),(0,a.kt)("p",null,"to the Coq code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-coq"},'(* Generated by coq-of-rust *)\nDefinition balance_of\n    (self : ref ltac:(Self))\n    (owner : erc20.AccountId.t)\n    : M ltac:(erc20.Balance) :=\n  let* self : M.Val (ref ltac:(Self)) := M.alloc self in\n  let* owner : M.Val erc20.AccountId.t := M.alloc owner in\n  let* \u03b10 : ref erc20.Erc20.t := M.read self in\n  let* \u03b11 : ref erc20.AccountId.t := borrow owner in\n  erc20.Erc20.t::["balance_of_impl"] \u03b10 \u03b11.\n')),(0,a.kt)("h2",{id:"workflow"},"Workflow"),(0,a.kt)("p",null,"To formally verify a Rust project using ",(0,a.kt)("inlineCode",{parentName:"p"},"coq-of-rust")," we work as follows:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"translate the Rust code to Coq using ",(0,a.kt)("inlineCode",{parentName:"li"},"coq-of-rust")),(0,a.kt)("li",{parentName:"ol"},"define the memory of the program (how the values will be allocated)"),(0,a.kt)("li",{parentName:"ol"},"write simulation functions for each function of the Rust code, to give a simpler and more functional definition of the code"),(0,a.kt)("li",{parentName:"ol"},"verify that these simulations are equivalent to the source code"),(0,a.kt)("li",{parentName:"ol"},"prove properties over these simulations")),(0,a.kt)("p",null,"As some of the work is very verbose and repetitive, such as the definition of the simulation functions, we make a heavy use of LLM tools such as ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/features/copilot"},"Github Copilot"),"."))}f.isMDXComponent=!0}}]);