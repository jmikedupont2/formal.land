"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[5569],{3905:function(e,t,o){o.d(t,{Zo:function(){return f},kt:function(){return m}});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function c(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var i=r.createContext({}),s=function(e){var t=r.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):c(c({},t),e)),o},f=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),p=s(o),m=n,b=p["".concat(i,".").concat(m)]||p[m]||u[m]||a;return o?r.createElement(b,c(c({ref:t},f),{},{components:o})):r.createElement(b,c({ref:t},f))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,c=new Array(a);c[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var s=2;s<a;s++)c[s]=o[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,o)}p.displayName="MDXCreateElement"},9232:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return s},assets:function(){return f},toc:function(){return u},default:function(){return m}});var r=o(3117),n=o(102),a=(o(7294),o(3905)),c=["components"],l={title:"Latest blog posts on our formal verification effort on Tezos",tags:["coq-tezos-of-ocaml","Tezos","coq-of-ocaml"]},i=void 0,s={permalink:"/blog/2022/12/13/latest-blog-posts-on-tezos",source:"@site/blog/2022-12-13-latest-blog-posts-on-tezos.md",title:"Latest blog posts on our formal verification effort on Tezos",description:"Here we recall some blog articles that we have written since this summer, on the formal verification of the protocol of Tezos. For this project, we are verifying a code base of around 100,000 lines of OCaml code. We automatically convert the OCaml code to the proof system Coq using the converter coq-of-ocaml. We then apply various proof techniques to make sure that the protocol of Tezos does not contain bugs.",date:"2022-12-13T00:00:00.000Z",formattedDate:"December 13, 2022",tags:[{label:"coq-tezos-of-ocaml",permalink:"/blog/tags/coq-tezos-of-ocaml"},{label:"Tezos",permalink:"/blog/tags/tezos"},{label:"coq-of-ocaml",permalink:"/blog/tags/coq-of-ocaml"}],readingTime:1.755,truncated:!0,authors:[],nextItem:{title:"Upgrade coq-of-ocaml to OCaml 4.14",permalink:"/blog/2022/06/23/upgrade-coq-of-ocaml-4.14"}},f={authorsImageUrls:[]},u=[],p={toc:u};function m(e){var t=e.components,o=(0,n.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Here we recall some blog articles that we have written since this summer, on the ",(0,a.kt)("a",{parentName:"p",href:"https://formal-land.gitlab.io/coq-tezos-of-ocaml/"},"formal verification of the protocol of Tezos"),". For this project, we are verifying a code base of around 100,000 lines of OCaml code. We automatically convert the OCaml code to the proof system Coq using the converter ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/formal-land/coq-of-ocaml"},"coq-of-ocaml"),". We then apply various proof techniques to make sure that the protocol of Tezos does not contain bugs."))}m.isMDXComponent=!0}}]);