"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[8432],{3905:function(t,e,r){r.d(e,{Zo:function(){return l},kt:function(){return m}});var n=r(7294);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var u=n.createContext({}),c=function(t){var e=n.useContext(u),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},l=function(t){var e=c(t.components);return n.createElement(u.Provider,{value:e},t.children)},f={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},p=n.forwardRef((function(t,e){var r=t.components,o=t.mdxType,a=t.originalType,u=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),p=c(r),m=o,b=p["".concat(u,".").concat(m)]||p[m]||f[m]||a;return r?n.createElement(b,i(i({ref:e},l),{},{components:r})):n.createElement(b,i({ref:e},l))}));function m(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=r.length,i=new Array(a);i[0]=p;var s={};for(var u in e)hasOwnProperty.call(e,u)&&(s[u]=e[u]);s.originalType=t,s.mdxType="string"==typeof t?t:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6810:function(t,e,r){r.r(e),r.d(e,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return c},assets:function(){return l},toc:function(){return f},default:function(){return m}});var n=r(3117),o=r(102),a=(r(7294),r(3905)),i=["components"],s={title:"Translation of function bodies from Rust to Coq",tags:["coq-of-rust","Rust","Coq"],authors:[]},u=void 0,c={permalink:"/blog/2023/11/26/rust-function-body",source:"@site/blog/2023-11-26-rust-function-body.md",title:"Translation of function bodies from Rust to Coq",description:"Our tool coq-of-rust enables formal verification of \ud83e\udd80&nbsp;Rust code, to make sure that a program has no bugs given a precise specification. We work by translating Rust programs to the general proof system \ud83d\udc13&nbsp;Coq.",date:"2023-11-26T00:00:00.000Z",formattedDate:"November 26, 2023",tags:[{label:"coq-of-rust",permalink:"/blog/tags/coq-of-rust"},{label:"Rust",permalink:"/blog/tags/rust"},{label:"Coq",permalink:"/blog/tags/coq"}],readingTime:4.975,truncated:!0,authors:[],prevItem:{title:"Verifying an ERC-20 smart contract in Rust",permalink:"/blog/2023/12/13/rust-verify-erc-20-smart-contract"},nextItem:{title:"Optimizing Rust translation to Coq with THIR and bundled traits",permalink:"/blog/2023/11/08/rust-thir-and-bundled-traits"}},l={authorsImageUrls:[]},f=[],p={toc:f};function m(t){var e=t.components,r=(0,o.Z)(t,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Our tool ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/formal-land/coq-of-rust"},"coq-of-rust")," enables formal verification of ",(0,a.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/"},"\ud83e\udd80","\xa0","Rust")," code, to make sure that a program has no bugs given a precise specification. We work by translating Rust programs to the general proof system ",(0,a.kt)("a",{parentName:"p",href:"https://coq.inria.fr/"},"\ud83d\udc13","\xa0","Coq"),"."),(0,a.kt)("p",null,"Here, we present how we translate function bodies from Rust to Coq in an example. We also show some of the optimizations we made to reduce the size of the translation."))}m.isMDXComponent=!0}}]);