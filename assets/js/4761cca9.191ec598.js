"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[607],{6506:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>r});var i=t(4848),a=t(8453);const o={id:"attributes",title:"Attributes"},s=void 0,c={id:"coq-of-ocaml/attributes",title:"Attributes",description:"We present the attributes which we can use with coq-of-ocaml. See the attributes documentation of OCaml for general information about the attributes mechanism. Note that the OCaml attributes do not change the behavior of a program. There are there to help developer tools.",source:"@site/docs/coq-of-ocaml/attributes.md",sourceDirName:"coq-of-ocaml",slug:"/coq-of-ocaml/attributes",permalink:"/docs/coq-of-ocaml/attributes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"attributes",title:"Attributes"},sidebar:"sidebar",previous:{title:"GADTs",permalink:"/docs/coq-of-ocaml/gadts"},next:{title:"Configuration",permalink:"/docs/coq-of-ocaml/configuration"}},l={},r=[{value:"coq_axiom_with_reason",id:"coq_axiom_with_reason",level:2},{value:"coq_cast",id:"coq_cast",level:2},{value:"coq_force_gadt",id:"coq_force_gadt",level:2},{value:"coq_grab_existentials",id:"coq_grab_existentials",level:2},{value:"coq_implicit",id:"coq_implicit",level:2},{value:"coq_match_gadt",id:"coq_match_gadt",level:2},{value:"coq_match_gadt_with_result",id:"coq_match_gadt_with_result",level:2},{value:"coq_match_with_default",id:"coq_match_with_default",level:2},{value:"coq_mutual_as_notation",id:"coq_mutual_as_notation",level:2},{value:"coq_phantom",id:"coq_phantom",level:2},{value:"coq_plain_module",id:"coq_plain_module",level:2},{value:"coq_precise_signature",id:"coq_precise_signature",level:2},{value:"coq_struct",id:"coq_struct",level:2},{value:"coq_tag_gadt",id:"coq_tag_gadt",level:2},{value:"coq_tagged_match",id:"coq_tagged_match",level:2},{value:"coq_type_annotation",id:"coq_type_annotation",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["We present the attributes which we can use with ",(0,i.jsx)(n.code,{children:"coq-of-ocaml"}),". See the ",(0,i.jsx)(n.a,{href:"https://caml.inria.fr/pub/docs/manual-ocaml/attributes.html",children:"attributes documentation"})," of OCaml for general information about the attributes mechanism. Note that the OCaml attributes do not change the behavior of a program. There are there to help developer tools."]}),"\n",(0,i.jsxs)(n.p,{children:["We prefix all the attributes of ",(0,i.jsx)(n.code,{children:"coq-of-ocaml"})," by ",(0,i.jsx)(n.code,{children:"coq_"}),". According to the OCaml syntax, depending on the context, you may use a single ",(0,i.jsx)(n.code,{children:"@"})," or a double ",(0,i.jsx)(n.code,{children:"@@"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"coq_axiom_with_reason",children:"coq_axiom_with_reason"}),"\n",(0,i.jsxs)(n.p,{children:["When we cannot import the definition of a value, we can use the ",(0,i.jsx)(n.code,{children:"[@coq_axiom_with_reason]"})," attribute to transform it to a Coq axiom. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:'let[@coq_axiom_with_reason "mutable state"] function_hard_to_translate_to_coq =\n  let n = ref 0 in\n  fun () ->\n    n := !n + 1;\n    !n\n'})}),"\n",(0,i.jsx)(n.p,{children:"is translated to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Definition function_hard_to_translate_to_coq : unit -> Z := axiom.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that we must give a reason for the use of ",(0,i.jsx)(n.code,{children:"[@coq_axiom_with_reason]"})," in a string parameter. We define the ",(0,i.jsx)(n.code,{children:"axiom"})," value in the ",(0,i.jsx)(n.code,{children:"coq-of-ocaml"}),"'s Coq library. The definition of ",(0,i.jsx)(n.code,{children:"axiom"})," is:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Axiom axiom : forall {A : Set}, A.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"coq_cast",children:"coq_cast"}),"\n",(0,i.jsxs)(n.p,{children:["With the attribute ",(0,i.jsx)(n.code,{children:"[@coq_cast]"})," we can force the type in Coq of an arbitrary OCaml expression using the following axiom:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Axiom cast : forall {A : Set} (B : Set), A -> B.\n"})}),"\n",(0,i.jsx)(n.p,{children:"For example, we translate:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"type _ t =\n  | Int : int t\n\nlet f (type a) (kind : a t) (x : a) : int =\n  match kind with\n  | Int -> (x[@coq_cast] : int) + 1\n"})}),"\n",(0,i.jsx)(n.p,{children:"to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Inductive t : Set :=\n| Int : t.\n\nDefinition f {a : Set} (kind : t) (x : a) : int :=\n  let 'Int := kind in\n  Z.add (cast int x) 1.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Thanks to the ",(0,i.jsx)(n.code,{children:"cast"})," axiom, we can get the information in Coq that ",(0,i.jsx)(n.code,{children:"x"})," is of type ",(0,i.jsx)(n.code,{children:"int"}),". Without this axiom the example would not work. Indeed, we do not track the type equations generated by the ",(0,i.jsx)(n.a,{href:"https://caml.inria.fr/pub/docs/manual-ocaml/gadts.html",children:"GADTs"})," so ",(0,i.jsx)(n.code,{children:"x"})," would be considered of type ",(0,i.jsx)(n.code,{children:"a"}),". Without the cast, the Coq code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Definition f {a : Set} (kind : t) (x : a) : int :=\n  let 'Int := kind in\n  Z.add x 1.\n"})}),"\n",(0,i.jsx)(n.p,{children:"generates the error:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'>   Z.add x 1.\n>         ^\nError:\nIn environment\na : Set\nkind : t\nx : a\nThe term "x" has type "a" while it is expected to have type "Z".\n'})}),"\n",(0,i.jsx)(n.h2,{id:"coq_force_gadt",children:"coq_force_gadt"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"[@coq_force_gadt]"})," attribute forces a type definition to be considered as a GADT during the translation to Coq. In particular, it forces the translation to erase the type parameters. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"type 'a standard_list =\n  | SNil\n  | SCons of 'a * 'a standard_list\n\ntype 'a gadt_list =\n  | GNil\n  | GCons of 'a * 'a gadt_list\n[@@coq_force_gadt]\n"})}),"\n",(0,i.jsx)(n.p,{children:"generates:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Inductive standard_list (a : Set) : Set :=\n| SNil : standard_list a\n| SCons : a -> standard_list a -> standard_list a.\n\nArguments SNil {_}.\nArguments SCons {_}.\n\nInductive gadt_list : Set :=\n| GNil : gadt_list\n| GCons : forall {a : Set}, a -> gadt_list -> gadt_list.\n"})}),"\n",(0,i.jsx)(n.p,{children:"One possible reason to force a type to be a GADT is to make sure that all the inductive types in a mutually recursive type definition have the same (zero) arity, as it is expected by Coq."}),"\n",(0,i.jsx)(n.h2,{id:"coq_grab_existentials",children:"coq_grab_existentials"}),"\n",(0,i.jsxs)(n.p,{children:["When translating terms that mentions existential variables it might be necessary to make that existential variable explicit.\nTo achieve this we use the ",(0,i.jsx)(n.code,{children:"[@coq_grab_existentials]"})," attribute. Here is an example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"type wrap1 =\n  | Cw1 : ('a -> 'b) -> wrap1\n\ntype wrap2 =\n  | Cw2 : ('a -> 'a) -> wrap2\n\nlet w2_of_w1 (w : wrap2) : wrap1  =\n  match [@coq_grab_existentials]w with\n  | Cw2 f ->\n    Cw1 (fun y -> f y)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Notice that the type of ",(0,i.jsx)(n.code,{children:"inj"})," is ",(0,i.jsx)(n.code,{children:"'a -> 'a"})," for some existential variable ",(0,i.jsx)(n.code,{children:"'a"}),".\nSince ",(0,i.jsx)(n.code,{children:"coq-of-ocaml"})," always generates fully anotated code, we need to explicitely\nname ",(0,i.jsx)(n.code,{children:"'a"})," in order to properly anotate the type of ",(0,i.jsx)(n.code,{children:"y"})," in the body of ",(0,i.jsx)(n.code,{children:"Cw1"}),".\nThis gives us the following translation:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Inductive wrap1 : Set :=\n| Cw1 : forall {a b : Set}, (a -> b) -> wrap1.\n\nInductive wrap2 : Set :=\n| Cw2 : forall {a : Set}, (a -> a) -> wrap2.\n\nDefinition w2_of_w1 (w : wrap2) : wrap1 :=\n  let 'Cw2 f := w in\n  let 'existT _ __Cw2_'a f as exi :=\n    existT (A := Set) (fun __Cw2_'a => __Cw2_'a -> __Cw2_'a) _ f\n    return\n      let fst := projT1 exi in\n      let __Cw2_'a := fst in\n      wrap1 in\n  Cw1 (fun (y : __Cw2_'a) => f y).\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the coq side we use an ",(0,i.jsx)(n.code,{children:"existT"})," to grab these existential variables.  The key\nhere is that this allows us to explicitely name ",(0,i.jsx)(n.code,{children:"'a"})," as ",(0,i.jsx)(n.code,{children:"__Cw2_'a"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The return clause is used to bind this new name in the return type of the term\nthat is being built, in this example it wouldn't be necessary but we generate\nthe same code for a simpler boilerplate."}),"\n",(0,i.jsx)(n.h2,{id:"coq_implicit",children:"coq_implicit"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:'[@coq_implicit "A" "..."]'})," attribute adds an arbitrary annotation on an OCaml identifier or constructor. We typically use this attribute to help Coq to infer implicit types where there is an ambiguity:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"let forget x = ()\n\nlet u = forget []\n"})}),"\n",(0,i.jsx)(n.p,{children:"generates the following Coq code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Definition forget {A : Set} (x : A) : unit := tt.\n\nDefinition u : unit := forget nil.\n"})}),"\n",(0,i.jsx)(n.p,{children:"which fails to compile due to the error:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'> Definition u : unit := forget nil.\n>                               ^^^\nError: Cannot infer the implicit parameter A of nil whose type is "Set".\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Indeed, the type parameter of this empty list does not matter as it is dropped by the ",(0,i.jsx)(n.code,{children:"forget"})," function. We can force it to an arbitrary value like ",(0,i.jsx)(n.code,{children:"unit"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:'let u = forget ([] [@coq_implicit "A" "unit"])\n'})}),"\n",(0,i.jsx)(n.p,{children:"so that the generated Coq code compiles:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Definition u : unit := forget (nil (A := unit)).\n"})}),"\n",(0,i.jsx)(n.h2,{id:"coq_match_gadt",children:"coq_match_gadt"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"[@coq_match_gadt]"})," attribute adds type annotations for the pattern variables in a ",(0,i.jsx)(n.code,{children:"match"}),". We force the type annotations to be valid using axioms (dynamic casts). For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"type 'a int_or_bool =\n  | Int : int int_or_bool\n  | Bool : bool int_or_bool\n\nlet to_int (type a) (kind : a int_or_bool) (x : a) : int =\n  match[@coq_match_gadt] (kind, x) with\n  | (Int, (x : int)) -> x\n  | (Bool, (x : bool)) -> if x then 1 else 0\n"})}),"\n",(0,i.jsx)(n.p,{children:"translates to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Inductive int_or_bool : Set :=\n| Int : int_or_bool\n| Bool : int_or_bool.\n\nDefinition to_int {a : Set} (kind : int_or_bool) (x : a) : Z :=\n  match (kind, x) with\n  | (Int, _ as x) =>\n    let x := cast Z x in\n    x\n  | (Bool, _ as x) =>\n    let x := cast bool x in\n    if x then\n      1\n    else\n      0\n  end.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"cast"})," operator is a dynamic cast defined by:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Axiom cast : forall {A : Set} (B : Set), A -> B.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that without the ",(0,i.jsx)(n.code,{children:"[@coq_match_gadt]"})," attribute this would generate:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Definition to_int {a : Set} (kind : int_or_bool) (x : a) : Z :=\n  match (kind, x) with\n  | (Int, _ as x) => x\n  | (Bool, _ as x) =>\n    if x then\n      1\n    else\n      0\n  end.\n"})}),"\n",(0,i.jsx)(n.p,{children:"which is ill-typed in Coq."}),"\n",(0,i.jsx)(n.h2,{id:"coq_match_gadt_with_result",children:"coq_match_gadt_with_result"}),"\n",(0,i.jsxs)(n.p,{children:["The attribute ",(0,i.jsx)(n.code,{children:"[@coq_match_gadt_with_result]"})," is similar to ",(0,i.jsx)(n.code,{children:"[@coq_match_gadt]"})," and also adds a cast for the result of each ",(0,i.jsx)(n.code,{children:"match"})," branch. Here is an example where it is useful:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"let incr_if_int (type a) (kind : a int_or_bool) (x : a) : a =\n  match[@coq_match_gadt_with_result] (kind, x) with\n  | (Int, (x : int)) -> x + 1\n  | (Bool, (x : bool)) -> x \n"})}),"\n",(0,i.jsx)(n.p,{children:"generates in Coq:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Definition incr_if_int {a : Set} (kind : int_or_bool) (x : a) : a :=\n  match (kind, x) with\n  | (Int, _ as x) =>\n    let x := cast Z x in\n    cast a (Z.add x 1)\n  | (Bool, _ as x) =>\n    let x := cast bool x in\n    cast a x\n  end.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"coq_match_with_default",children:"coq_match_with_default"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"[@coq_match_with_default]"})," adds a default branch for ",(0,i.jsx)(n.code,{children:"match"})," which are syntactically incomplete. For example, when we annotate the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"let incr_int (kind_and_value : int int_or_bool * int) : int =\n  match[@coq_match_with_default] kind_and_value with\n  | (Int, x) -> x + 1\n"})}),"\n",(0,i.jsx)(n.p,{children:"we generate the following valid Coq code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Definition incr_int (kind_and_value : int_or_bool * Z) : Z :=\n  match kind_and_value with\n  | (Int, x) => Z.add x 1\n  | _ => unreachable_gadt_branch\n  end.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["even if the ",(0,i.jsx)(n.code,{children:"match"})," is syntactically incomplete due to the GADT's constraints. We define ",(0,i.jsx)(n.code,{children:"unreachable_gadt_branch"})," as an axiom by:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Axiom unreachable_gadt_branch : forall {A : Set}, A.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We can combine this attribute with ",(0,i.jsx)(n.code,{children:"[@coq_match_gadt]"})," or ",(0,i.jsx)(n.code,{children:"[@coq_match_gadt_with_result]"})," if needed."]}),"\n",(0,i.jsx)(n.h2,{id:"coq_mutual_as_notation",children:"coq_mutual_as_notation"}),"\n",(0,i.jsxs)(n.p,{children:["The attribute ",(0,i.jsx)(n.code,{children:"[@coq_mutual_as_notation]"})," makes the definition of a mutually recursive function a notation. For example, we transform the following OCaml code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"let rec double_list l =\n  match l with\n  | [] -> l\n  | n :: l -> double n :: double_list l\n\nand[@coq_mutual_as_notation] double n = 2 * n\n"})}),"\n",(0,i.jsx)(n.p,{children:"to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Reserved Notation \"'double\".\n\nFixpoint double_list (l : list int) : list int :=\n  let double := 'double in\n  match l with\n  | [] => l\n  | cons n l => cons (double n) (double_list l)\n  end\n\nwhere \"'double\" := (fun (n : int) => Z.mul 2 n).\n\nDefinition double := 'double.\n"})}),"\n",(0,i.jsx)(n.p,{children:"Without this attribute, we would generate a mutually recursive definition:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Fixpoint double_list (l : list int) : list int :=\n  match l with\n  | [] => l\n  | cons n l => cons (double n) (double_list l)\n  end\n\nwith double (n : int) : int := Z.mul 2 n.\n"})}),"\n",(0,i.jsx)(n.p,{children:"which is rejected by the type-checker of Coq:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Error:\nRecursive definition of double_list is ill-formed.\nIn environment\ndouble_list : list int -> list int\ndouble : int -> int\nl : list int\nn : int\nl0 : list int\nRecursive call to double has principal argument equal to \n"n" instead of "l0".\nRecursive definition is:\n"fun l : list int =>\n match l with\n | [] => l\n | n :: l0 => double n :: double_list l0\n end".\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For recursive notations, you can combine this attribute with ",(0,i.jsx)(n.code,{children:"@coq_struct"})," to tell ",(0,i.jsx)(n.code,{children:"coq-of-ocaml"})," to generate a recursive notation. For example, we transform:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"type 'a tree =\n  | Leaf of 'a\n  | Node of 'a tree list\n\nlet rec sum (t : int tree) =\n  match t with\n  | Leaf n -> n\n  | Node ts -> sums ts\n\nand[@coq_mutual_as_notation][@coq_struct \"ts\"] sums (ts : int tree list) =\n  match ts with\n  | [] -> 0\n  | t :: ts -> sum t + sums ts\n"})}),"\n",(0,i.jsx)(n.p,{children:"to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Reserved Notation \"'sums\".\n\nFixpoint sum (t : tree int) : int :=\n  let sums := 'sums in\n  match t with\n  | Leaf n => n\n  | Node ts => sums ts\n  end\n\nwhere \"'sums\" :=\n  (fix sums (ts : list (tree int)) {struct ts} : int :=\n    match ts with\n    | [] => 0\n    | cons t ts => Z.add (sum t) (sums ts)\n    end).\n\nDefinition sums := 'sums.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["using the keyword ",(0,i.jsx)(n.code,{children:"fix"})," for the defintion of ",(0,i.jsx)(n.code,{children:"sums"}),". In this example too, the type-checker of Coq would reject the definition without a notation."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["In the proofs, whenever the definition of ",(0,i.jsx)(n.code,{children:"sums"})," appears unfolded, you can run the tactic ",(0,i.jsx)(n.code,{children:"fold sums"})," to hide it."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"coq_phantom",children:"coq_phantom"}),"\n",(0,i.jsxs)(n.p,{children:["When it can, ",(0,i.jsx)(n.code,{children:"coq-of-ocaml"})," detects phantom types and remove their type annotations. For example, we translate the following OCaml code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"type 'a num = int\n\ntype even = Even\n\nlet two : even num = 2\n"})}),"\n",(0,i.jsx)(n.p,{children:"to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Definition num : Set := Z.\n\nInductive even : Set :=\n| Even : even.\n\nDefinition two : num := 2.\n"})}),"\n",(0,i.jsx)(n.p,{children:"The reason is that phantom types may generate ambiguities during type inference in Coq."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"[@coq_phantom]"})," attribute forces ",(0,i.jsx)(n.code,{children:"coq-of-ocaml"})," to consider a type as phantom. This can be useful for abstract types in ",(0,i.jsx)(n.code,{children:".mli"})," files, since their definition is not reachable. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"type 'a num\n"})}),"\n",(0,i.jsx)(n.p,{children:"translates to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Parameter num : forall (a : Set), Set.\n"})}),"\n",(0,i.jsx)(n.p,{children:"but:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"type 'a num\n[@@coq_phantom]\n"})}),"\n",(0,i.jsx)(n.p,{children:"generates:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Parameter num : Set.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"coq_plain_module",children:"coq_plain_module"}),"\n",(0,i.jsxs)(n.p,{children:["We may prefer to translate a module to a plain Coq module rather than a record. The ",(0,i.jsx)(n.code,{children:"[@coq_plain_module]"})," attribute requires a module to be translated as a plain Coq module. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"module type T = sig\n  type t\n\n  val v : t\nend\n\nmodule M = struct\n  type t = int\n\n  let v = 12\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:"translates to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Module T.\n  Record signature {t : Set} : Set := {\n    t := t;\n    v : t;\n  }.\nEnd T.\n\nDefinition M :=\n  let t : Set := int in\n  let v := 12 in\n  existT (A := unit) (fun _ => _) tt\n    {|\n      T.v := v\n    |}.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["With the ",(0,i.jsx)(n.code,{children:"[@coq_plain_module]"})," attribute we translate:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"module type T = sig\n  type t\n\n  val v : t\nend\n\nmodule[@coq_plain_module] M = struct\n  type t = int\n\n  let v = 12\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:"to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Module T.\n  Record signature {t : Set} : Set := {\n    t := t;\n    v : t;\n  }.\nEnd T.\n\nModule M.\n  Definition t : Set := int.\n  \n  Definition v : int := 12.\nEnd M.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"coq_precise_signature",children:"coq_precise_signature"}),"\n",(0,i.jsxs)(n.p,{children:["In order to distinguish between two signatures with the same value names, we can add the ",(0,i.jsx)(n.code,{children:"[@coq_precise_signature]"})," attribute. For example, we can translate:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"module type Sig1 = sig\n  type t\n\n  val f : t -> t -> t * t\nend\n[@@coq_precise_signature]\n\nmodule type Sig2 = sig\n  type t\n\n  val f : t -> t list\nend\n[@@coq_precise_signature]\n\nmodule M1 : Sig1 = struct\n  type t = int\n\n  let f n m = (n, m)\nend\n\nmodule M2 : Sig2 = struct\n  type t = int\n\n  let f n = []\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:"to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Module Sig1.\n  Record signature {t : Set} : Set := {\n    t := t;\n    f : t -> t -> t * t;\n  }.\nEnd Sig1.\n\nModule Sig2.\n  Record signature {t : Set} : Set := {\n    t := t;\n    f : t -> list t;\n  }.\nEnd Sig2.\n\nModule M1.\n  Definition t : Set := int.\n  \n  Definition f {A B : Set} (n : A) (m : B) : A * B := (n, m).\n  \n  Definition module :=\n    existT (A := Set) _ t\n      {|\n        Sig1.f := f\n      |}.\nEnd M1.\nDefinition M1 := M1.module.\n\nModule M2.\n  Definition t : Set := int.\n  \n  Definition f {A B : Set} (n : A) : list B := nil.\n  \n  Definition module :=\n    existT (A := Set) _ t\n      {|\n        Sig2.f := f\n      |}.\nEnd M2.\nDefinition M2 := M2.module.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here we can distinguish between the signature ",(0,i.jsx)(n.code,{children:"Sig1"})," and ",(0,i.jsx)(n.code,{children:"Sig2"})," thanks to the type shape of ",(0,i.jsx)(n.code,{children:"f"}),". Without this attribute, we would get the following error message:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"--- tests/precise_signature.ml:13:1 ----------------------------------------------- module (1/2) ---\n\n  11 | end\n  12 | \n> 13 | module M1 : Sig1 = struct\n> 14 |   type t = int\n> 15 | \n> 16 |   let f n m = (n, m)\n> 17 | end\n  18 | \n  19 | module M2 : Sig2 = struct\n  20 |   type t = int\n\n\nIt is unclear which name this signature has. At least two similar\nsignatures found, namely:\n\n* Sig1\n* Sig2\n\nWe were looking for a module signature name for the following shape:\n[ f ]\n(a shape is a list of names of values and sub-modules)\n\nWe use the concept of shape to find the name of a signature for Coq.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Indeed, by default, we only compare signatures based on the names of their fields. With the ",(0,i.jsx)(n.code,{children:"[@coq_precise_signature]"})," we also use a heuristic to distinguish the types of the values."]}),"\n",(0,i.jsx)(n.h2,{id:"coq_struct",children:"coq_struct"}),"\n",(0,i.jsxs)(n.p,{children:["For recursive definitions, we can force the name of the parameter on which we do structural recursion using the attribute ",(0,i.jsx)(n.code,{children:'[@coq_struct "name"]'}),". This has the same effect as the ",(0,i.jsx)(n.code,{children:"{struct name}"})," keyword in Coq. For example, we translate:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:'let[@coq_struct "accumulator"] rec length l accumulator =\n  match l with\n  | [] -> accumulator\n  | _ :: l -> length l (accumulator + 1)\n'})}),"\n",(0,i.jsx)(n.p,{children:"to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Fixpoint length {A : Set} (l : list A) (accumulator : Z) {struct accumulator}\n  : Z :=\n  match l with\n  | [] => accumulator\n  | cons _ l => length l (Z.add accumulator 1)\n  end.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["which is invalid in Coq as the decreasing argument is ",(0,i.jsx)(n.code,{children:"l"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"coq_tag_gadt",children:"coq_tag_gadt"}),"\n",(0,i.jsx)(n.p,{children:"We use this tag in order to generate GADTs with a closer semantics to OCaml. Using this tag we translate the following code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"type 'a term =\n  | T_Int : int -> int term\n  | T_String : string -> string term\n  | T_Sum : int term * int term -> int term\n[@@coq_tag_gadt]\n"})}),"\n",(0,i.jsx)(n.p,{children:"to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Inductive term : vtag -> Set :=\n| T_Int : int -> term int_tag\n| T_String : string -> term string_tag\n| T_Sum : term int_tag -> term int_tag -> term int_tag.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To see its usefulness translating impossible branches without extra axioms check ",(0,i.jsx)(n.code,{children:"coq_tagged_match"})]}),"\n",(0,i.jsx)(n.h2,{id:"coq_tagged_match",children:"coq_tagged_match"}),"\n",(0,i.jsxs)(n.p,{children:["With the ",(0,i.jsx)(n.code,{children:"coq_tag_gadt"})," attribute we can translate OCaml code closer to its actual semantics. This allows us to translate pattern matches with impossible branches without the use of axioms. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"type 'a term =\n  | Int : int -> int term\n  | String : string -> string term\n  | Sum : int term * int term -> int term\n[@@coq_tag_gadt]\n\nlet rec get_int (e : int term) : int =\n  match[@coq_tagged_match][@coq_match_with_default] e with\n  | Int n -> n\n  | Sum (e1, e2) -> get_int e1 + get_int e2\n  | _ -> .\n"})}),"\n",(0,i.jsx)(n.p,{children:"Will be translated to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Inductive term : vtag -> Set :=\n| Int : int -> term int_tag\n| String : string -> term string_tag\n| Sum : term int_tag -> term int_tag -> term int_tag.\n\nFixpoint get_int (e : term int_tag) : int :=\n  match e in term t0 return t0 = int_tag -> int with\n  | Int n => fun eq0 => ltac:(subst; exact n)\n  | Sum e1 e2 =>\n    fun eq0 => ltac:(subst; exact (Z.add (get_int e1) (get_int e2)))\n  | _ => ltac:(discriminate)\n  end eq_refl.\n"})}),"\n",(0,i.jsx)(n.p,{children:"Notice that without the use of tags we would have the following code instead:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Inductive term : Set :=\n| Int : int -> term\n| String : string -> term\n| Sum : expr -> expr -> term\n| Pair : expr -> expr -> term.\n\n\nFixpoint get_int (e : term) : int :=\n  match e with\n  | Int n => n\n  | Sum e1 e2 => Z.add (get_int e1) (get_int e2)\n  | _ => unreachable_gadt_branch\n  end.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["As we can see this naive translation uses the ",(0,i.jsx)(n.code,{children:"unreachable_gadt_branch"})," axiom."]}),"\n",(0,i.jsx)(n.h2,{id:"coq_type_annotation",children:"coq_type_annotation"}),"\n",(0,i.jsx)(n.p,{children:"Sometimes we need to add a type annotation on an expression, either as a documentation or to help the Coq code to compile. We translate this OCaml example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"let n1 =\n  let m = 12 in\n  let n1 = m[@coq_type_annotation] in\n  n1\n"})}),"\n",(0,i.jsx)(n.p,{children:"to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-coq",children:"Definition n1 : int :=\n  let m := 12 in\n  let n1 := (m : int) in\n  n1.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["where we add an annotation ",(0,i.jsx)(n.code,{children:": int"})," on the expression ",(0,i.jsx)(n.code,{children:"m"}),". The type we use for the annotation is the type inferred by the OCaml compiler."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(6540);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);