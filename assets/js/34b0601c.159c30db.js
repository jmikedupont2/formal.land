"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[4595],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),d=o,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return t?a.createElement(f,i(i({ref:n},p),{},{components:t})):a.createElement(f,i({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4628:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var a=t(3117),o=t(102),r=(t(7294),t(3905)),i=["components"],l={id:"ocaml-core",title:"OCaml core"},s=void 0,c={unversionedId:"coq-of-ocaml/ocaml-core",id:"coq-of-ocaml/ocaml-core",title:"OCaml core",description:"coq-of-ocaml translates the functional core of OCaml to the corresponding Coq constructs. It adds type annotations for each definition. We present how this translation work.",source:"@site/docs/coq-of-ocaml/ocaml-core.md",sourceDirName:"coq-of-ocaml",slug:"/coq-of-ocaml/ocaml-core",permalink:"/docs/coq-of-ocaml/ocaml-core",tags:[],version:"current",frontMatter:{id:"ocaml-core",title:"OCaml core"},sidebar:"sidebar",previous:{title:"Cookbook",permalink:"/docs/coq-of-ocaml/cookbook"},next:{title:"Type definitions",permalink:"/docs/coq-of-ocaml/type-definitions"}},p=[{value:"Functions",id:"functions",children:[],level:2},{value:"Pattern-matching",id:"pattern-matching",children:[],level:2},{value:"Records",id:"records",children:[],level:2},{value:"Recursive definitions",id:"recursive-definitions",children:[],level:2},{value:"Monadic notations",id:"monadic-notations",children:[],level:2}],m={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"coq-of-ocaml")," translates the functional core of ",(0,r.kt)("a",{parentName:"p",href:"https://ocaml.org/"},"OCaml")," to the corresponding ",(0,r.kt)("a",{parentName:"p",href:"https://coq.inria.fr/"},"Coq")," constructs. It adds type annotations for each definition. We present how this translation work."),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("p",null,"The OCaml functions are translated to standard Coq functions. For example, the definition of the composition function in OCaml:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},"let compose g f x =\n  g (f x)\n")),(0,r.kt)("p",null,"produces in Coq:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-coq"},"Definition compose {A B C : Set} (g : A -> B) (f : C -> A) (x : C) : B :=\n  g (f x).\n")),(0,r.kt)("p",null,"The polymorphic variables ",(0,r.kt)("inlineCode",{parentName:"p"},"A"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"B")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"C")," are written explicitly as there are no polymorphic type inference in Coq (it is unclear if type variables should be in ",(0,r.kt)("inlineCode",{parentName:"p"},"Set"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Prop")," for example). These polymorphic variables are set implicit with ",(0,r.kt)("inlineCode",{parentName:"p"},"{...}")," so that they are inferred when doing function application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},"let incr n = n + 1\n\nlet plus_two = compose incr incr\n")),(0,r.kt)("p",null,"is translated to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-coq"},"Definition incr (n : Z) : Z := Z.add n 1.\n\nDefinition plus_two : Z -> Z := compose incr incr.\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"All the generated types are in ",(0,r.kt)("inlineCode",{parentName:"p"},"Set"),". You may need to use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/coq/coq/wiki/Impredicative-Set"},(0,r.kt)("inlineCode",{parentName:"a"},"-impredicative-set"))," option of Coq to allow complex cases of polymorphism. An alternative is to replace all the generated occurrences of ",(0,r.kt)("inlineCode",{parentName:"p"},"Set")," by ",(0,r.kt)("inlineCode",{parentName:"p"},"Type"),". However, this may expose you to universe inconsistencies in proofs.")),(0,r.kt)("h2",{id:"pattern-matching"},"Pattern-matching"),(0,r.kt)("p",null,"The pattern-matching is handled in Coq. The main difference is that constructors are curryfied:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},"type 'a sequence =\n  | Empty\n  | Cons of 'a * 'a sequence\n\nlet rec sum s =\n  match s with\n  | Empty -> 0\n  | Cons (n, s') -> n + sum s'\n")),(0,r.kt)("p",null,"generates:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-coq"},"Inductive sequence (a : Set) : Set :=\n| Empty : sequence a\n| Cons : a -> sequence a -> sequence a.\n\nArguments Empty {_}.\nArguments Cons {_}.\n\nFixpoint sum (s : sequence Z) : Z :=\n  match s with\n  | Empty => 0\n  | Cons n s' => Z.add n (sum s')\n  end.\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"when")," clauses on patterns are encoded with a tuple of matches:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},"let rec sum s =\n  match s with\n  | Empty -> 0\n  | Cons (n, _) when n < 0 -> sum s'\n  | Cons (n, s') -> n + sum s'\n")),(0,r.kt)("p",null,"generates:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-coq"},"Fixpoint sum (s : sequence Z) : Z :=\n  match\n    (s,\n      match s with\n      | Cons n s' => OCaml.Stdlib.lt n 0\n      | _ => false\n      end) with\n  | (Empty, _) => 0\n  | (Cons n s', true) => sum s'\n  | (Cons n s', _) => Z.add n (sum s')\n  end.\n")),(0,r.kt)("h2",{id:"records"},"Records"),(0,r.kt)("p",null,"Coq is more restrictive on the naming of record fields than OCaml. Two different records cannot share a common field name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},"type answer = {\n  code : int;\n  message : string }\n")),(0,r.kt)("p",null,"generates:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-coq"},"Module answer.\n  Record record := {\n    code : Z;\n    message : string }.\n  Definition with_code (r : record) code : record :=\n    {| code := code; message := message r |}.\n  Definition with_message (r : record) message : record :=\n    {| code := code r; message := message |}.\nEnd answer.\nDefinition answer := answer.record.\n")),(0,r.kt)("p",null,"Records in Coq are automatically namespaced into a module of the same name. This prevents name collisions between record fields. As Coq has no builtin constructs for substitution in records, ",(0,r.kt)("inlineCode",{parentName:"p"},"coq-of-ocaml")," generates a ",(0,r.kt)("inlineCode",{parentName:"p"},"with_")," function for each of the fields."),(0,r.kt)("p",null,"To read into the record, the generated code prefixes all the fields by the record's name:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},"let get_answer_message answer =\n  answer.message\n")),(0,r.kt)("p",null,"generates:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-coq"},"Definition get_answer_message (answer : answer) : string :=\n  answer.(answer.message).\n")),(0,r.kt)("p",null,"Patterns on records are also translated:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},"let get_answer_code = function\n  { code } -> code\n")),(0,r.kt)("p",null,"generates:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-coq"},"Definition get_answer_code (function_parameter : answer) : Z :=\n  let '{| answer.code := code |} := function_parameter in\n  code.\n")),(0,r.kt)("h2",{id:"recursive-definitions"},"Recursive definitions"),(0,r.kt)("p",null,"In Coq all functions must be proven terminating. We disable the termination checks for now by using the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SimonBoulier/TypingFlags"},"TypingFlags plugin")," (this feature should be included in the upcoming Coq 8.11 release). At the start of every generated files, ",(0,r.kt)("inlineCode",{parentName:"p"},"coq-of-ocaml")," unset the termination flag:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-coq"},"Require Import TypingFlags.Loader.\nUnset Guard Checking.\n")),(0,r.kt)("p",null,"Unsetting the termination also remove the strict positivity checks for the definition of inductive types. We will probably add an option to re-activate the termination check when possible."),(0,r.kt)("h2",{id:"monadic-notations"},"Monadic notations"),(0,r.kt)("p",null,"The OCaml language provides a way to define ",(0,r.kt)("a",{parentName:"p",href:"https://caml.inria.fr/pub/docs/manual-ocaml/bindingops.html"},"monadic operators")," so that we can define programs such as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},"let return (x : 'a) : 'a option =\n  Some x\n\nlet (let*) (x : 'a option) (f : 'a -> 'b option) : 'b option =\n  match x with\n  | Some x -> f x\n  | None -> None\n\nlet get_head l =\n  match l with\n  | [] -> None\n  | x :: _ -> Some x\n\nlet sum_first_elements l1 l2 =\n  let* x1 = get_head l1 in\n  let* (x2, x3) = get_head l2 in\n  return (x1 + x2 + x3)\n")),(0,r.kt)("p",null,"We translate the program using similar let-notations in Coq. We require the user to manually insert these notations. For example, here ",(0,r.kt)("inlineCode",{parentName:"p"},"coq-of-ocaml")," generates:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-coq"},"Definition _return {a : Set} (x : a) : option a := Some x.\n\nDefinition op_letstar {a b : Set} (x : option a) (f : a -> option b)\n  : option b :=\n  match x with\n  | Some x => f x\n  | None => None\n  end.\n\nDefinition get_head {A : Set} (l : list A) : option A :=\n  match l with\n  | [] => None\n  | cons x _ => Some x\n  end.\n\nDefinition sum_first_elements (l1 : list int) (l2 : list (int * int))\n  : option int :=\n  let* x1 := get_head l1 in\n  let* '(x2, x3) := get_head l2 in\n  _return (Z.add (Z.add x1 x2) x3).\n")),(0,r.kt)("p",null,"By adding the following notations in the generated code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-coq"},"Notation \"'let*' x ':=' X 'in' Y\" :=\n  (op_letstar X (fun x => Y))\n  (at level 200, x ident, X at level 100, Y at level 200).\n\nNotation \"'let*' ' x ':=' X 'in' Y\" :=\n  (op_letstar X (fun x => Y))\n  (at level 200, x pattern, X at level 100, Y at level 200).\n")),(0,r.kt)("p",null,"the function ",(0,r.kt)("inlineCode",{parentName:"p"},"get_head")," compiles. Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"coq-of-ocaml")," does not generate these notations, and you have to add them by hand."))}u.isMDXComponent=!0}}]);