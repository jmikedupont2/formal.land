"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[1131],{8579:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var n=o(4848),r=o(8453);const a={title:"Optimizing Rust translation to Coq with THIR and bundled traits",tags:["coq-of-rust","Rust","Coq","trait","THIR","HIR"],author:"Guillaume Claret"},s=void 0,i={permalink:"/blog/2023/11/08/rust-thir-and-bundled-traits",source:"@site/blog/2023-11-08-rust-thir-and-bundled-traits.md",title:"Optimizing Rust translation to Coq with THIR and bundled traits",description:"We continued our work on coq-of-rust, a tool to formally verify Rust programs using the proof system Coq&nbsp;\ud83d\udc13. This tool translates Rust programs to an equivalent Coq program, which can then be verified using Coq's proof assistant. It opens the door to building mathematically proven bug-free Rust programs.",date:"2023-11-08T00:00:00.000Z",formattedDate:"November 8, 2023",tags:[{label:"coq-of-rust",permalink:"/blog/tags/coq-of-rust"},{label:"Rust",permalink:"/blog/tags/rust"},{label:"Coq",permalink:"/blog/tags/coq"},{label:"trait",permalink:"/blog/tags/trait"},{label:"THIR",permalink:"/blog/tags/thir"},{label:"HIR",permalink:"/blog/tags/hir"}],readingTime:5.22,hasTruncateMarker:!0,authors:[{name:"Guillaume Claret"}],frontMatter:{title:"Optimizing Rust translation to Coq with THIR and bundled traits",tags:["coq-of-rust","Rust","Coq","trait","THIR","HIR"],author:"Guillaume Claret"},unlisted:!1,prevItem:{title:"Translation of function bodies from Rust to Coq",permalink:"/blog/2023/11/26/rust-function-body"},nextItem:{title:"Trait representation in Coq",permalink:"/blog/2023/08/25/trait-representation-in-coq"}},l={authorsImageUrls:[void 0]},u=[];function c(t){const e={a:"a",code:"code",li:"li",p:"p",ul:"ul",...(0,r.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:["We continued our work on ",(0,n.jsx)(e.a,{href:"https://github.com/formal-land/coq-of-rust",children:"coq-of-rust"}),", a tool to formally verify ",(0,n.jsx)(e.a,{href:"https://www.rust-lang.org/",children:"Rust"})," programs using the proof system ",(0,n.jsx)(e.a,{href:"https://coq.inria.fr/",children:"Coq\xa0\ud83d\udc13"}),". This tool translates Rust programs to an equivalent Coq program, which can then be verified using Coq's proof assistant. It opens the door to building mathematically proven bug-free Rust programs."]}),"\n",(0,n.jsxs)(e.p,{children:["We present two main improvements we made to ",(0,n.jsx)(e.code,{children:"coq-of-rust"}),":"]}),"\n",(0,n.jsxs)(e.ul,{children:["\n",(0,n.jsx)(e.li,{children:"Using the THIR intermediate language of Rust to have more information during the translation to Coq."}),"\n",(0,n.jsx)(e.li,{children:"Bundling the type-classes representing the traits of Rust to have faster type-checking in Coq."}),"\n"]})]})}function d(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(c,{...t})}):c(t)}},8453:(t,e,o)=>{o.d(e,{R:()=>s,x:()=>i});var n=o(6540);const r={},a=n.createContext(r);function s(t){const e=n.useContext(a);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:s(t.components),n.createElement(a.Provider,{value:e},t.children)}}}]);