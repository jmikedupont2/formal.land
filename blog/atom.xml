<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://formal.land/blog</id>
    <title>Formal Land Blog</title>
    <updated>2022-06-23T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://formal.land/blog"/>
    <subtitle>Formal Land Blog</subtitle>
    <icon>https://formal.land/img/land-512.png</icon>
    <entry>
        <title type="html"><![CDATA[Upgrade coq-of-ocaml to OCaml 4.14]]></title>
        <id>/2022/06/23/upgrade-coq-of-ocaml-4.14</id>
        <link href="https://formal.land/blog/2022/06/23/upgrade-coq-of-ocaml-4.14"/>
        <updated>2022-06-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In an effort to support the latest version of the protocol of Tezos we upgraded coq-of-ocaml to add compatibility with OCaml 4.14. The result is available in the branch ocaml-4.14. We describe here how we made this upgrade.]]></summary>
        <content type="html"><![CDATA[<p>In an effort to support the latest version of the <a href="https://gitlab.com/tezos/tezos/-/tree/master/src/proto_alpha/lib_protocol">protocol of Tezos</a> we upgraded <a href="https://github.com/formal-land/coq-of-ocaml"><code>coq-of-ocaml</code></a> to add compatibility with OCaml 4.14. The result is available in the branch <a href="https://github.com/formal-land/coq-of-ocaml/pull/217"><code>ocaml-4.14</code></a>. We describe here how we made this upgrade.</p><h2>Usage of Merlin</h2><p>In <code>coq-of-ocaml</code> we are using <a href="https://github.com/ocaml/merlin">Merlin</a> to get the typed <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax tree</a> of OCaml files. We see the AST through the <a href="https://docs.mirage.io/ocaml/Typedtree/index.html">Typedtree</a> interface, together with an access to all the definitions of the current compilation environment. Merlin computes the current environment by understanding how an OCaml project is configured and connecting to the <a href="https://dune.build/">dune</a> build system. The environment is mandatory for certain transformations in <code>coq-of-ocaml</code>, like:</p><ul><li>finding a canonical name for module types;</li><li>propagating phantom types.</li></ul><p>In order to use Merlin as a library (rather than as a daemon), we vendor the <a href="https://github.com/rgrinberg/merlin/tree/lsp">LSP version</a> of <a href="https://github.com/rgrinberg">rgrinberg</a> in the folder <a href="https://github.com/formal-land/coq-of-ocaml/tree/master/vendor"><code>vendor/</code></a>. This vendored version works with no extra configurations.</p><h2>Upgrade</h2><p>When a new version of OCaml is out, we upgrade our vendored version of Merlin to a compatible one. Then we do the necessary changes to <code>coq-of-ocaml</code>, as the interface of the AST generally evolves with small changes. For OCaml 4.14, the main change was some types becoming abstract such as <code>Types.type_expr</code>. To access to the fields of these types, we now need to use a specific getter and do changes such as:</p><pre><code class="language-diff">+    match typ.desc with
-    match Types.get_desc typ with
</code></pre><p>This made some patterns in <code>match</code> expressions more complex, but otherwise the changes were very minimal. We ran all the unit-tests of <code>coq-of-ocaml</code> after the upgrade and they were still valid.</p><h2>Git submodule or copy &amp; paste?</h2><p>To vendor Merlin we have two possibilities:</p><ol><li>Using a <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">Git submodule</a>.</li><li>Doing a copy &amp; paste of the code.</li></ol><p>The first possibility is more efficient in terms of space, but there are a few disadvantages:</p><ul><li>we cannot make small modifications if needed;</li><li>the archives generated by Github do not contain the code of the submodules (see this <a href="https://github.com/dear-github/dear-github/issues/214">issue</a>)</li><li>if a commit in the repository for the submodule disappears, then the submodule is unusable.</li></ul><p>The last reason forced us to do a copy &amp; paste for OCaml 4.14. We now have to be cautious not to commit the generate <code>.ml</code> file for the OCaml parser.</p><h2>Next</h2><p>The next change will be doing the upgrade to OCaml 5. There should be much more changes, and in particular a new way of handling the effects. We do not know yet if it will be possible to translate the effect handlers to Coq in a nice way.</p>]]></content>
        <author>
            <name>Guillaume Claret</name>
            <uri>https://github.com/clarus</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Status update on the verification of Tezos]]></title>
        <id>/2022/06/15/status update-tezos</id>
        <link href="https://formal.land/blog/2022/06/15/status update-tezos"/>
        <updated>2022-06-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Here we give an update on our verification effort on the protocol of Tezos. We add the marks:]]></summary>
        <content type="html"><![CDATA[<p>Here we give an update on our <a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/">verification effort</a> on the protocol of Tezos. We add the marks:</p><ul><li>‚úÖ for &quot;rather done&quot;</li><li>üåä for &quot;partially done&quot;</li><li>‚ùå for &quot;most is yet to do&quot;</li></ul><p>On the website of project, we also automatically generates pages such as <a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/docs/status/compare/">Compare</a> to follow the status of the tasks.</p><h2>Maintenance of the translation ‚úÖ</h2><p>We were able to maintain most of the translation from OCaml to Coq of the protocol of Tezos using <a href="https://github.com/formal-land/coq-of-ocaml">coq-of-ocaml</a>, including all the translation of the Michelson interpreter. There was an increase in the size of the OCaml code base in recent months, due to new features added in Tezos like the <a href="https://research-development.nomadic-labs.com/tezos-is-scaling.html">rollups</a>. Here are the numbers of lines of code (<code>.ml</code> and <code>.mli</code> files) for the various protocol versions:</p><ul><li>protocol H: <code>51147</code></li><li>protocol I: <code>59535</code></li><li>protocol J: <code>83271</code> (increase mainly due to the rollups)</li><li>protocol Alpha (development version of K): <code>90716</code></li></ul><p>We still translate most of the protocol code up to version J. We stayed on version J for a while as we wanted to add as many proofs as possible before doing a proof of backward compatibility between J and K. We are currently updating the translation to support the protocol version Alpha, preparing for the translation of K.</p><p>For protocol J, we needed to add a <a href="https://gitlab.com/nomadic-labs/coq-tezos-of-ocaml/-/blob/master/blacklist.txt">blacklist.txt</a> of files that we do not support. Indeed, we need to add new changes to <code>coq-of-ocaml</code> to support these or do hard-to-maintain changes to <a href="https://gitlab.com/tezos/tezos/-/merge_requests/3303">our fork</a> of the Tezos protocol. We plan to complete the translation and remove this black-list for the protocol J soon (in a week or two).</p><h2>Size of the proofs ‚úÖ</h2><p>One of our plans is to have a reasonable quantity of proofs, to cover a reasonable quantity of code and properties from the protocol. We believe we have a good quantity of proofs now, as we have more than 50,000 lines of Coq code (for an OCaml codebase of 80,000 lines).</p><p>In addition to our main targets, we verify many &quot;smaller&quot; properties, such as:</p><ul><li>conversion functions are inverses (when there are two <code>to_int</code> and <code>of_int</code> functions in a file, we show that they are inverses);</li><li>the <code>compare</code> functions, to order elements, are well defined (see our blog post <a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/blog/2022/04/04/verifying-the-compare-functions">Verifying the compare functions of OCaml</a>);</li><li>invariants are preserved. For example, <a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/docs/proofs/carbonated_map#Make.update_is_valid">here</a> we show that updating a carbonated map preserves the property of having a size field actually equal to the number of elements.</li></ul><p>We should note that the size of Coq proofs tends to grow faster than the size of the verified code. We have no coverage metrics to know how much of the code is covered by these proofs.</p><h2>Data-encodings üåä</h2><p>The <a href="https://gitlab.com/nomadic-labs/data-encoding">data-encoding</a> library is a set of combinators to write serialization/de-serialization functions. We verify that the encodings defined for each protocol data type are bijective. The good thing we have is a semi-automated tactic to verify the use of the <code>data-encoding</code> primitives. We detail this approach in our blog post <a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/blog/2021/11/22/data-encoding-automation">Automation of <code>data_encoding</code> proofs</a>. We can verify most of the encoding functions that we encounter. From there, we also express the <strong>invariant</strong> associated with each data type, which the encodings generally check at runtime. The invariants are then the domain of definition of the encodings.</p><p>However, we have a hole: we do not verify the <code>data-encoding</code> library itself. Thus the <a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/docs/environment/proofs/data_encoding">axioms we made</a> on the data-encoding primitives may have approximations. And indeed, we missed one issue in the development code of the protocol. This is thus a new high-priority target to verify the <code>data-encoding</code> library itself. One of the challenges for the proof is the use of side-effects (references and exceptions) in this library.</p><h2>Property-based tests üåä</h2><p>The property-based tests on the protocol are located in <a href="https://gitlab.com/tezos/tezos/-/tree/master/src/proto_alpha/lib_protocol/test/pbt"><code>src/proto_alpha/lib_protocol/test/pbt</code></a>. These tests are composed of:</p><ul><li>a generator, generating random inputs of a certain shape;</li><li>a property function, a boolean function taking a generated input and supposed to always answer <code>true</code>.</li></ul><p>We translated a part of these tests to Coq, to convert them to theorems and have specifications extracted from the code. The result of this work is summarized in this blog post: <a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/blog/2022/06/07/formal-verification-of-property-based-tests">Formal verification of property based tests</a>. We have fully translated and verified four test files over a total of twelve. We are continuing the work of translations and proofs.</p><p>However, we found that for some of the files the proofs were taking a long time to write compared to the gains in safety. Indeed, the statements made in the tests are sometimes too complex when translated into general theorems. For example, for <a href="https://gitlab.com/tezos/tezos/-/blob/master/src/proto_alpha/lib_protocol/test/pbt/test_carbonated_map.ml">test_carbonated_map.ml</a> we have to deal with:</p><ul><li>gas exhaustion (seemingly impossible in the tests);</li><li>data structures of size greater than <code>max_int</code> (impossible in practice).</li></ul><p>All of that complicate the proofs for little gain in safety. So I would say that not all the property-based tests have a nice and useful translation to Coq. We should still note that for some of the tests, like with saturation arithmetic, we have proofs that work well. For these, we rely on the automated linear arithmetic tactic <a href="https://coq.inria.fr/refman/addendum/micromega.html"><code>lia</code></a> of Coq to verify properties over integer overflows.</p><h2>Storage system üåä</h2><p>By &quot;storage system&quot; we understand the whole set of functors defined in <a href="https://gitlab.com/tezos/tezos/-/blob/master/src/proto_alpha/lib_protocol/storage_functors.ml"><code>storage_functors.ml</code></a> and how we apply them to define the protocol storage in <a href="https://gitlab.com/tezos/tezos/-/blob/master/src/proto_alpha/lib_protocol/storage_functors.ml"><code>storage.ml</code></a>. These functors create sub-storages with signatures such as:</p><pre><code class="language-ocaml">module type Non_iterable_indexed_data_storage = sig
  type t
  type context = t
  type key
  type value
  val mem : context -&gt; key -&gt; bool Lwt.t
  val get : context -&gt; key -&gt; value tzresult Lwt.t
  val find : context -&gt; key -&gt; value option tzresult Lwt.t
  val update : context -&gt; key -&gt; value -&gt; Raw_context.t tzresult Lwt.t
  val init : context -&gt; key -&gt; value -&gt; Raw_context.t tzresult Lwt.t
  val add : context -&gt; key -&gt; value -&gt; Raw_context.t Lwt.t
  val add_or_remove : context -&gt; key -&gt; value option -&gt; Raw_context.t Lwt.t
  val remove_existing : context -&gt; key -&gt; Raw_context.t tzresult Lwt.t
  val remove : context -&gt; key -&gt; Raw_context.t Lwt.t
end
</code></pre><p>This <code>Non_iterable_indexed_data_storage</code> API looks like the API of an OCaml&#x27;s <a href="https://v2.ocaml.org/api/Map.Make.html">Map</a>. As a result, our goal for the storage is to show that is can be simulated by standard OCaml data structures such as sets and maps. This is a key step to unlock further reasoning about code using the storage.</p><p>Unfortunately, we were not able to verify the whole storage system yet. Among the difficulties are that:</p><ul><li>there are many layers in the definition of the storage;</li><li>the storage functors use a lot of abstractions, and sometimes it is unclear how to specify them in the general case.</li></ul><p>Still, we have verified some of the functors as seen in <a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/docs/proofs/storage_functors"><code>Proofs/Storage_functors.v</code></a> and specified the <code>storage.ml</code> file in <a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/docs/storage"><code>Proos/Storage.v</code></a>. We believe in having the correct specifications for all of the storage abstractions now. We plan to complete all these proofs later.</p><h2>Michelson</h2><p>The verification of the Michelson interpreter is what occupied most of our time. By considering the OCaml files whose name starts by <code>script_</code>, the size of the Michelson interpreter is around 20,000 lines of OCaml code.</p><h3>Simulations üåä</h3><p>The interpreter relies heavily on <a href="https://v2.ocaml.org/manual/gadts.html">GADTs</a> in OCaml. Because these do not translate nicely in Coq, we need to write simulations in dependent types of the interpreter functions, and prove them correct in Coq. We describe this process in our <a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/docs/guides/michelson">Michelson Guide</a>.</p><p>The main difficulties we encountered are:</p><ul><li>the number of simulations to write (covering the 20,000 lines of OCaml);</li><li>the execution time of the proof of correctness of the simulations. This is due to the large size of the inductive types describing the Michelson AST, and the use of dependent types generating large proof terms. For example, there are around 30 cases for the types and 150 for the instructions node in the AST.</li></ul><p>When writing the simulations, we are also verifying the termination of all the functions and the absence of reachable <code>assert false</code>. We have defined the simulation of many functions, but are still missing important ones such as <a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/docs/script_ir_translator/#parse_instr_aux"><code>parse_instr_aux</code></a> to parse Michelson programs.</p><h3>Mi-Cho-Coq üåä</h3><p>We have a project to verify that the <a href="https://gitlab.com/nomadic-labs/mi-cho-coq">Mi-Cho-Coq</a> framework, used to formally verify smart contracts written in Michelson, is compatible with the implementation of the Michelson interpreter in OCaml. We have a partial proof of compatibility in <a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/docs/simulations/micho_to_dep">Micho_to_dep.v</a>. We still need to complete this proof, especially to handle instructions with loops. Our goal is to show a complete inclusion of the semantics of Mi-Cho-Coq into the semantics of the implementation.</p><h3>Parse/unparse ‚ùå</h3><p>We wanted to verify that the various parsing and unparsing functions over Michelson are inverses. These functions exist for:</p><ul><li>comparable types</li><li>types</li><li>comparable data</li><li>data</li></ul><p>Because we are still focused on writing, verifying or updating the simulations, we are still not done for this task.</p><h2>Conclusion</h2><p>We have many ongoing projects but few fully completed tasks. We will focus more on having terminated proofs.</p>]]></content>
        <author>
            <name>Guillaume Claret</name>
            <uri>https://github.com/clarus</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Make Tezos the first formally verified cryptocurrency]]></title>
        <id>/2022/02/02/make-tezos-a-formally-verified-crypto</id>
        <link href="https://formal.land/blog/2022/02/02/make-tezos-a-formally-verified-crypto"/>
        <updated>2022-02-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Elephants]]></summary>
        <content type="html"><![CDATA[<p><img src="elephants-elmira-gokoryan.webp" alt="Elephants"/></p><p>Our primary goal at <a href="https://formal.land/">Formal<!-- -->¬†<!-- -->Land<!-- -->¬†<!-- -->üå≤</a> is to make <a href="https://tezos.com/">Tezos</a> the first crypto-currency with a formally verified implementation. With <a href="https://en.wikipedia.org/wiki/Formal_verification">formal verification</a>, thanks to mathematical methods, we can check that a program behaves as expected for all possible inputs. Formal verification goes beyond what testing can do, as testing can only handle a finite amount of cases. That is critical as cryptocurrencies hold a large amount of money (around $3B for Tezos today). The current result of our verification project is available on <a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/">nomadic-labs.gitlab.io/coq-tezos-of-ocaml</a>. Formal verification is also key to allowing Tezos to evolve constantly in a safe and backward compatible manner.</p><p>We proceed in two steps:</p><ol><li>we translate the code of Tezos, written in <a href="https://ocaml.org/">OCaml</a>, to the proof language <a href="https://coq.inria.fr/">Coq</a> using the translator <a href="https://github.com/foobar-land/coq-of-ocaml">coq-of-ocaml</a>;</li><li>we write our specifications and proofs in the Coq language.</li></ol><p>We believe this is one of the most efficient ways to proceed, as we can work on an almost unmodified version of the codebase and use the full power of the mature proof system Coq. The code of Tezos is composed of around:</p><ul><li>50,000 lines for the protocol (the kernel of Tezos), and</li><li>200,000 lines for the shell (everything else, including the peer-to-peer layer and the storage backend).</li></ul><p>We are currently focusing on verifying the protocol for the following modules.</p><h2>Data-encoding</h2><p>The <a href="https://gitlab.com/nomadic-labs/data-encoding">data-encoding</a> library offers serialization and deserialization to binary and JSON formats. It is used in various parts of the Tezos protocol, especially on all the data types ending up in the storage system. In practice, many encodings are defined in the OCaml files named <code>*_repr.ml</code>. We verify that the <code>data-encoding</code> library is correctly used to define the encodings. We check that converting a value to binary format and from binary returns the initial value. We explicit the domain of validity of such conversions. This verification work generally reveals and propagates invariants about the data structures of the protocol. As an invariant example, all the account amounts should always be positive. Having these invariants will be helpful for the verification of higher-level layers of the protocol.</p><h2>Michelson smart contracts</h2><p>The smart contract language of Tezos is <a href="https://tezos.gitlab.io/active/michelson.html">Michelson</a>. The interpreter and type-checker of smart contracts is one of the most complex and critical parts of the protocol. We are verifying two things about this code:</p><ul><li>The equivalence of the interpreter and the Coq semantics for Michelson defined in the project <a href="https://gitlab.com/nomadic-labs/mi-cho-coq">Mi-Cho-Coq</a>. Thanks to this equivalence, we can make sure that the formal verification of smart contracts is sound for the current version of the protocol.</li><li>The compatibility of the parsing and unparsing functions for the Michelson types and values. The parsing functions take care of the type-checking and do a lot of sanity checks on Michelson expressions with appropriate error messages. Showing that the parsing and unparsing functions are inverses is important for security reasons. The Michelson values are always unparsed at the end of a smart contract execution to be stored on disk.</li></ul><p>To do these proofs, we also give a new semantics of Michelson, expressed using dependent types rather than <a href="https://ocaml.org/manual/gadts-tutorial.html">GADTs</a> in the OCaml implementation.</p><h2>Storage system</h2><p>Cryptocurrencies typically take a lot of space on disk (in the hundreds of gigabytes). In Tezos, we use the key-value database <a href="https://irmin.org/">Irmin</a>. The protocol provides a lot of <a href="https://gitlab.com/tezos/tezos/-/blob/master/src/proto_alpha/lib_protocol/storage_functors.ml">abstractions</a> over this database to expose higher-level interfaces with set and map-like APIs. We verify that these abstractions are valid doing a proof by simulation, where we show that the whole system is equivalent to an <a href="https://en.wikipedia.org/wiki/In-memory_database">in-memory database</a> using simpler data structures. Thanks to this simulation, we will be able to reason about code using the storage as if we were using the simpler in-memory version.</p><h2>In addition</h2><p>We also plan to verify:</p><ul><li>The implementation of the <code>data-encoding</code> library itself. This code is challenging for formal verification as it contains many imperative features. Another specificity of this library is that it sits outside of the protocol of Tezos, and we might need to adapt <code>coq-of-ocaml</code> to support it.</li><li>The <a href="https://gitlab.com/tezos/tezos/-/tree/master/src/proto_alpha/lib_protocol/test/pbt">property-based tests of the protocol</a>. These tests are written as boolean functions (or functions raising exceptions), which must return <code>true</code> on any possible inputs. We will verify them in the general case by importing their definitions to Coq and verifying with mathematical proofs that they are always correct.</li></ul><p>:::tip Contact
For any questions or remarks, contact us on üëâ<!-- -->¬†<a href="mailto:contact@formal.land">c<!-- -->o<!-- -->n<!-- -->t<!-- -->a<!-- -->c<!-- -->t<!-- -->@<!-- -->formal<!-- -->.<!-- -->l<!-- -->a<!-- -->n<!-- -->d</a>¬†<!-- -->üëà.
:::</p>]]></content>
        <author>
            <name>Guillaume Claret</name>
            <uri>https://github.com/clarus</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[New blog posts and Meetup talk]]></title>
        <id>/2021/11/12/new-blog-posts-and-meetup-talk</id>
        <link href="https://formal.land/blog/2021/11/12/new-blog-posts-and-meetup-talk"/>
        <updated>2021-11-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Recently, we added two new blog posts about the verification of the crypto-currency Tezos:]]></summary>
        <content type="html"><![CDATA[<p>Recently, we added two new blog posts about the verification of the crypto-currency <a href="https://tezos.com/">Tezos</a>:</p><ul><li><a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/blog/2021/11/01/verify-michelson-types-mi-cho-coq/">Verify the Michelson types of Mi-Cho-Coq</a> to compare the types defined in the Tezos code for the <a href="http://tezos.gitlab.io/active/michelson.html">Michelson</a> interpreter and in the <a href="https://gitlab.com/nomadic-labs/mi-cho-coq">Mi-Cho-Coq library</a> to verify smart contracts;</li><li><a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/blog/2021/11/08/translate-tenderbake/">Translate the Tenderbake&#x27;s code to Coq</a> to explain how we translated the recent changes in Tezos to the Coq using <a href="https://github.com/foobar-land/coq-of-ocaml">coq-of-ocaml</a>. In particular we translated the code of the new <a href="https://research-development.nomadic-labs.com/a-look-ahead-to-tenderbake.html">Tenderbake</a> consensus algorithm.</li></ul><p>We also talked at the <a href="https://www.meetup.com/LambdaLille/events/281374644/">Lambda Lille Meetup</a> (in French) to present our work on <code>coq-of-ocaml</code> for Tezos. A video on the <a href="https://www.youtube.com/channel/UC-hC7y_ilQBq0QCa9xDu1iA">Youtube channel</a> of the Meetup should be available shortly. We thanks the organizers for hosting the talk.</p>]]></content>
        <author>
            <name>Guillaume Claret</name>
            <uri>https://github.com/clarus</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Verification of the use of data-encoding]]></title>
        <id>/2021/10/27/verification-data-encoding</id>
        <link href="https://formal.land/blog/2021/10/27/verification-data-encoding"/>
        <updated>2021-10-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We added a blog post about the verification of the use of data-encodings in the protocol of Tezos. Currently, we work on the verification of Tezos and publish our blog articles there. We use coq-of-ocaml to translate the OCaml code to Coq and do our verification effort.]]></summary>
        <content type="html"><![CDATA[<p>We added a blog post about the <a href="https://formal-land.gitlab.io/coq-tezos-of-ocaml/blog/2021/10/20/data-encoding-usage">verification of the use of data-encodings</a> in the protocol of Tezos. Currently, we work on the verification of Tezos and publish our blog articles there. We use <a href="https://foobar-land.github.io/coq-of-ocaml/">coq-of-ocaml</a> to translate the OCaml code to Coq and do our verification effort.</p>]]></content>
        <author>
            <name>Guillaume Claret</name>
            <uri>https://github.com/clarus</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome]]></title>
        <id>/2021/10/10/welcome</id>
        <link href="https://formal.land/blog/2021/10/10/welcome"/>
        <updated>2021-10-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Welcome to the blog of Formal Land. Here we will post various updates about the work we are doing.]]></summary>
        <content type="html"><![CDATA[<p>Welcome to the blog of <a href="/">Formal Land</a>. Here we will post various updates about the work we are doing.</p>]]></content>
        <author>
            <name>Guillaume Claret</name>
            <uri>https://github.com/clarus</uri>
        </author>
    </entry>
</feed>