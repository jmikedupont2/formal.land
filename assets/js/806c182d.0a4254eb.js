"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[1691],{3580:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>n,metadata:()=>i,toc:()=>c});var r=o(4848),a=o(8453);const n={title:"Current formal verification efforts \ud83d\udcaa",tags:["coq-of-ocaml","OCaml","Solidity","Rust","TypeScript"]},s=void 0,i={permalink:"/blog/2023/01/24/current-verification-efforts",source:"@site/blog/2023-01-24-current-verification-efforts.md",title:"Current formal verification efforts \ud83d\udcaa",description:"We are diversifying ourselves to apply formal verification on 3\ufe0f\u20e3 new languages with Solidity, Rust, and TypeScript. In this article we describe our approach. For these three languages, we translate the code to the proof system \ud83d\udc13&nbsp;Coq. We generate the cleanest&nbsp;\ud83e\uddfc possible output to simplify the formal verification&nbsp;\ud83d\udcd0 effort that comes after.",date:"2023-01-24T00:00:00.000Z",formattedDate:"January 24, 2023",tags:[{label:"coq-of-ocaml",permalink:"/blog/tags/coq-of-ocaml"},{label:"OCaml",permalink:"/blog/tags/o-caml"},{label:"Solidity",permalink:"/blog/tags/solidity"},{label:"Rust",permalink:"/blog/tags/rust"},{label:"TypeScript",permalink:"/blog/tags/type-script"}],readingTime:4.89,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Current formal verification efforts \ud83d\udcaa",tags:["coq-of-ocaml","OCaml","Solidity","Rust","TypeScript"]},unlisted:!1,prevItem:{title:"Representation of Rust methods in Coq",permalink:"/blog/2023/04/26/representation-of-rust-methods-in-coq"},nextItem:{title:"Latest blog posts on our formal verification effort on Tezos",permalink:"/blog/2022/12/13/latest-blog-posts-on-tezos"}},l={authorsImageUrls:[]},c=[];function f(e){const t={a:"a",blockquote:"blockquote",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["We are diversifying ourselves to apply ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Formal_verification",children:"formal verification"})," on 3\ufe0f\u20e3 new languages with ",(0,r.jsx)(t.strong,{children:"Solidity"}),", ",(0,r.jsx)(t.strong,{children:"Rust"}),", and ",(0,r.jsx)(t.strong,{children:"TypeScript"}),". In this article we describe our approach. For these three languages, we translate the code to the proof system ",(0,r.jsx)(t.a,{href:"https://coq.inria.fr/",children:"\ud83d\udc13\xa0Coq"}),". We generate the cleanest\xa0\ud83e\uddfc possible output to simplify the formal verification\xa0\ud83d\udcd0 effort that comes after."]}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"Formal verification is a way to ensure that a program follows its specification in\xa0\ud83d\udcaf% of cases thanks to the use of mathematical methods. It removes far more bugs and security issues than testing, and is necessary to deliver software of the highest quality\xa0\ud83d\udc8e."}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>i});var r=o(6540);const a={},n=r.createContext(a);function s(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);