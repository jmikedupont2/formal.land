"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"sidebar":[{"type":"category","label":"Company","items":[{"type":"link","label":"\ud83e\udd9a About","href":"/docs/company/about","docId":"company/about"},{"type":"link","label":"\ud83c\udfc1 Introduction","href":"/docs/company/intro","docId":"company/intro"},{"type":"link","label":"\ud83d\udce3 Claims","href":"/docs/company/claims","docId":"company/claims"},{"type":"link","label":"\ud83e\uddd1\u200d\ud83d\udcbc Careers","href":"/docs/company/careers","docId":"company/careers"},{"type":"link","label":"\ud83d\udcdc Press","href":"/docs/company/press","docId":"company/press"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Formal verification","items":[{"type":"link","label":"\ud83d\udc2b OCaml verification","href":"/docs/verification/ocaml","docId":"verification/ocaml"},{"type":"link","label":"\ud83e\udd80 Rust verification","href":"/docs/verification/rust","docId":"verification/rust"},{"type":"link","label":"\ud83d\udd78\ufe0f TypeScript verification","href":"/docs/verification/typescript","docId":"verification/typescript"},{"type":"link","label":"\ud83c\uddf8 Solidity verification","href":"/docs/verification/solidity","docId":"verification/solidity"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Services","items":[{"type":"link","label":"\ud83d\udc2b OCaml development","href":"/docs/services/ocaml-development","docId":"services/ocaml-development"},{"type":"link","label":"\ud83e\udd80 Rust development","href":"/docs/services/rust-development","docId":"services/rust-development"},{"type":"link","label":"\ud83c\uddf8 Solidity development","href":"/docs/services/solidity-development","docId":"services/solidity-development"}],"collapsible":true,"collapsed":true},{"type":"category","label":"\ud83d\udc2b coq-of-ocaml","items":[{"type":"link","label":"What is coq-of-ocaml","href":"/docs/coq-of-ocaml/introduction","docId":"coq-of-ocaml/introduction"},{"type":"link","label":"Install","href":"/docs/coq-of-ocaml/install","docId":"coq-of-ocaml/install"},{"type":"link","label":"Run","href":"/docs/coq-of-ocaml/run","docId":"coq-of-ocaml/run"},{"type":"link","label":"Cookbook","href":"/docs/coq-of-ocaml/cookbook","docId":"coq-of-ocaml/cookbook"},{"type":"category","label":"Language","items":[{"type":"link","label":"OCaml core","href":"/docs/coq-of-ocaml/ocaml-core","docId":"coq-of-ocaml/ocaml-core"},{"type":"link","label":"Type definitions","href":"/docs/coq-of-ocaml/type-definitions","docId":"coq-of-ocaml/type-definitions"},{"type":"link","label":"Module system","href":"/docs/coq-of-ocaml/module-system","docId":"coq-of-ocaml/module-system"},{"type":"link","label":"GADTs","href":"/docs/coq-of-ocaml/gadts","docId":"coq-of-ocaml/gadts"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Options","items":[{"type":"link","label":"Attributes","href":"/docs/coq-of-ocaml/attributes","docId":"coq-of-ocaml/attributes"},{"type":"link","label":"Configuration","href":"/docs/coq-of-ocaml/configuration","docId":"coq-of-ocaml/configuration"}],"collapsible":true,"collapsed":true},{"type":"category","label":"More","items":[{"type":"link","label":"Examples","href":"/docs/coq-of-ocaml/examples","docId":"coq-of-ocaml/examples"},{"type":"link","label":"Faq","href":"/docs/coq-of-ocaml/faq","docId":"coq-of-ocaml/faq"}],"collapsible":true,"collapsed":true}],"collapsible":true,"collapsed":true}]},"docs":{"company/about":{"id":"company/about","title":"\ud83e\udd9a About","description":"We started as a company in November 2021, and are now a team of five people. We work primarily on the formal verification of the crypto-currency Tezos. We made and use the translator coq-of-ocaml from the OCaml language to the proof system Coq. This allows us to verify properties about the kernel of Tezos, composed of around 100,000 lines of code. We publish our results on the website of the project coq-tezos-of-ocaml.","sidebar":"sidebar"},"company/careers":{"id":"company/careers","title":"\ud83e\uddd1\u200d\ud83d\udcbc Careers","description":"We are currently complete in terms of team, but are looking for new customers and may hire more after that.","sidebar":"sidebar"},"company/claims":{"id":"company/claims","title":"\ud83d\udce3 Claims","description":"Here are our claims.","sidebar":"sidebar"},"company/intro":{"id":"company/intro","title":"\ud83c\udfc1 Introduction","description":"Here we present our project.","sidebar":"sidebar"},"company/press":{"id":"company/press","title":"\ud83d\udcdc Press","description":"Here are some documents you can read or use.","sidebar":"sidebar"},"coq-of-ocaml/attributes":{"id":"coq-of-ocaml/attributes","title":"Attributes","description":"We present the attributes which we can use with coq-of-ocaml. See the attributes documentation of OCaml for general information about the attributes mechanism. Note that the OCaml attributes do not change the behavior of a program. There are there to help developer tools.","sidebar":"sidebar"},"coq-of-ocaml/configuration":{"id":"coq-of-ocaml/configuration","title":"Configuration","description":"We present the configuration mechanism of coq-of-ocaml to define some global settings. We write the configuration in a file in the JSON format. To run coq-of-ocaml with a configuration file, use the -config option:","sidebar":"sidebar"},"coq-of-ocaml/cookbook":{"id":"coq-of-ocaml/cookbook","title":"Cookbook","description":"Here we list typical situations where we need to change the OCaml source code so that the translated code compiles in Coq.","sidebar":"sidebar"},"coq-of-ocaml/examples":{"id":"coq-of-ocaml/examples","title":"Examples","description":"The main project handled with coq-of-ocaml is the crypto-currency Tezos. The result is in the project:","sidebar":"sidebar"},"coq-of-ocaml/faq":{"id":"coq-of-ocaml/faq","title":"Faq","description":"Here we answer to some questions you may have when using coq-of-ocaml.","sidebar":"sidebar"},"coq-of-ocaml/gadts":{"id":"coq-of-ocaml/gadts","title":"GADTs","description":"We provide some support for the OCaml\'s GADTs, which are an advanced form of algebraic data-types. As Coq does not have a direct equivalent for the GADTs, we introduce some axioms guided by the user annotations.","sidebar":"sidebar"},"coq-of-ocaml/install":{"id":"coq-of-ocaml/install","title":"Install","description":"We recommend to install the latest stable version of coq-of-ocaml via opam.","sidebar":"sidebar"},"coq-of-ocaml/introduction":{"id":"coq-of-ocaml/introduction","title":"What is coq-of-ocaml","description":"coq-of-ocaml is a compiler from the OCaml programming language to the Coq proof language. It aims generate idiomatic and human readable Coq code. Technically speaking, this is a shallow embedding of OCaml into Coq.","sidebar":"sidebar"},"coq-of-ocaml/module-system":{"id":"coq-of-ocaml/module-system","title":"Module system","description":"To handle the module system of OCaml, the compiler coq-of-ocaml generates either plain Coq modules or dependent records. It never generates Coq functors or module types. You can use coq-of-ocaml to translate modules, module types, functors and first-class modules.","sidebar":"sidebar"},"coq-of-ocaml/ocaml-core":{"id":"coq-of-ocaml/ocaml-core","title":"OCaml core","description":"coq-of-ocaml translates the functional core of OCaml to the corresponding Coq constructs. It adds type annotations for each definition. We present how this translation work.","sidebar":"sidebar"},"coq-of-ocaml/run":{"id":"coq-of-ocaml/run","title":"Run","description":"coq-of-ocaml translates the OCaml files one by one. It uses Merlin to get the typing environment of each file. Thus you should first have a project which works with Merlin. This is generally the case for a project compiled with dune.","sidebar":"sidebar"},"coq-of-ocaml/type-definitions":{"id":"coq-of-ocaml/type-definitions","title":"Type definitions","description":"coq-of-ocaml generates the Coq definitions corresponding to OCaml\'s type definitions.","sidebar":"sidebar"},"services/ocaml-development":{"id":"services/ocaml-development","title":"\ud83d\udc2b OCaml development","description":"We offer our OCaml (or Reason/ReScript/Melange) development services. We work as contractors and our unique rate is $10,000 per month all inclusive. Our work can be terminated without notice period on your side. Some of our developers have more than 10 years of experience in software development, either in embedded systems or in Web applications (front and back). We strive to follow strict schedule and fulfill all customer requirements.","sidebar":"sidebar"},"services/rust-development":{"id":"services/rust-development","title":"\ud83e\udd80 Rust development","description":"We help you build your products by offering Rust development services. We work as contractors only. Some of our developers have more than 10 years of experience in software development, either in embedded systems or in Web applications (front and back). We strive to follow strict schedule and fulfill customer requirements.","sidebar":"sidebar"},"services/solidity-development":{"id":"services/solidity-development","title":"\ud83c\uddf8 Solidity development","description":"We offer our Solidity development services. We work as contractors and our unique rate is $10,000 per month all inclusive. Our work can be terminated without notice period on your side. Some of our developers have more than 10 years of experience in software development, either in embedded systems or in Web applications (front and back). We strive to follow strict schedule and fulfill all customer requirements.","sidebar":"sidebar"},"services/typescript-development":{"id":"services/typescript-development","title":"\ud83c\udf10 TypeScript development","description":"We offer our OCaml development services (or in Reason/ReScript/Melange languages that are close). We work as contractors and our work can be terminated without notice period.  Some of our developers have more than 10 years of experience in software development, either in embedded systems or in Web applications (front and back). We strive to follow schedule and fulfill requirements."},"verification/ocaml":{"id":"verification/ocaml","title":"\ud83d\udc2b OCaml verification","description":"To formally verify OCaml programs we are developing the translator coq-of-ocaml. It translates OCaml code to similar-looking code in the interactive proof assistant Coq. We are then expert in the Coq system and can formally verify arbitrarily complex properties.","sidebar":"sidebar"},"verification/rust":{"id":"verification/rust","title":"\ud83e\udd80 Rust verification","description":"We are working on bringing more formal verification to the Rust community. You can look at this page that is intending to group all the formal verification efforts on Rust, or at the company Cryspen doing formal verification on Rust.","sidebar":"sidebar"},"verification/solidity":{"id":"verification/solidity","title":"\ud83c\uddf8 Solidity verification","description":"Presentation","sidebar":"sidebar"},"verification/typescript":{"id":"verification/typescript","title":"\ud83d\udd78\ufe0f TypeScript verification","description":"\ud83d\udcfd\ufe0f&nbsp;Demo&nbsp;","sidebar":"sidebar"}}}')}}]);