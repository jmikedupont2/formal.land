"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[2044],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=o,c=m["".concat(s,".").concat(u)]||m[u]||f[u]||i;return n?a.createElement(c,r(r({ref:t},d),{},{components:n})):a.createElement(c,r({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2670:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},assets:function(){return d},toc:function(){return f},default:function(){return u}});var a=n(3117),o=n(102),i=(n(7294),n(3905)),r=["components"],l={title:"Trait representation in Coq",tags:["coq-of-rust","Rust","Coq","trait"],author:"Bart\u0142omiej Kr\xf3likowski"},s=void 0,p={permalink:"/blog/2023/08/25/trait-representation-in-coq",source:"@site/blog/2023-08-25-trait-representation-in-coq.md",title:"Trait representation in Coq",description:"In our project coq-of-rust we translate programs written in Rust to equivalent programs in the language of the proof system Coq&nbsp;\ud83d\udc13, which will later allow us to formally verify them.",date:"2023-08-25T00:00:00.000Z",formattedDate:"August 25, 2023",tags:[{label:"coq-of-rust",permalink:"/blog/tags/coq-of-rust"},{label:"Rust",permalink:"/blog/tags/rust"},{label:"Coq",permalink:"/blog/tags/coq"},{label:"trait",permalink:"/blog/tags/trait"}],readingTime:7.58,truncated:!0,authors:[{name:"Bart\u0142omiej Kr\xf3likowski"}],nextItem:{title:"Monad for side effects in Rust",permalink:"/blog/2023/05/28/monad-for-side-effects-in-rust"}},d={authorsImageUrls:[void 0]},f=[{value:"\ud83e\udd80 Traits in Rust",id:"-traits-in-rust",children:[],level:2},{value:"Our translation",id:"our-translation",children:[],level:2},{value:"Translation of associated types",id:"translation-of-associated-types",children:[],level:2},{value:"The example in Coq",id:"the-example-in-coq",children:[],level:2},{value:"Conclusion",id:"conclusion",children:[],level:2}],m={toc:f};function u(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In our project ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/formal-land/coq-of-rust"},"coq-of-rust")," we translate programs written in ",(0,i.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/"},"Rust")," to equivalent programs in the language of the proof system ",(0,i.kt)("a",{parentName:"p",href:"https://coq.inria.fr/"},"Coq","\xa0","\ud83d\udc13"),", which will later allow us to formally verify them.\nBoth Coq and Rust have many unique features, and there are many differences between them, so in the process of translation we need to treat the case of each language construction separately.\nIn this post, we discuss how we translate the most complicated one: ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch10-02-traits.html"},"traits"),"."),(0,i.kt)("h2",{id:"-traits-in-rust"},"\ud83e\udd80 Traits in Rust"),(0,i.kt)("p",null,"Trait is the way to define a shared behaviour for a group of types in Rust.\nTo define a trait we have to specify a list of signatures of the methods we want to be implemented for the types implementing our trait.\nWe can also create a generic definition of a trait with the same syntax as in every Rust definition.\nOptionally, we can add a default implementation to any method or extend the list with associated types.\nTraits can also extend a behaviour of one or more other traits, in which case, to implement a trait for a type we would have to implement all its supertraits first."),(0,i.kt)("p",null,"Consider the following example (adapted from the ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/"},"Rust Book"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'struct Sheep {\n    naked: bool,\n    name: &\'static str,\n}\n\ntrait Animal {\n    // Associated function signature; `Self` refers to the implementor type.\n    fn new(name: &\'static str) -> Self;\n\n    // Method signatures; these will return a string.\n    fn name(&self) -> &\'static str;\n    fn noise(&self) -> &\'static str;\n\n    // Traits can provide default method definitions.\n    fn talk(&self) {\n        println!("{} says {}", self.name(), self.noise());\n    }\n}\n\nimpl Sheep {\n    fn is_naked(&self) -> bool {\n        self.naked\n    }\n}\n\n// Implement the `Animal` trait for `Sheep`.\nimpl Animal for Sheep {\n    // `Self` is the implementor type: `Sheep`.\n    fn new(name: &\'static str) -> Sheep {\n        Sheep {\n            name: name,\n            naked: false,\n        }\n    }\n\n    fn name(&self) -> &\'static str {\n        self.name\n    }\n\n    fn noise(&self) -> &\'static str {\n        if self.is_naked() {\n            "baaaaah?"\n        } else {\n            "baaaaah!"\n        }\n    }\n\n    // Default trait methods can be overridden.\n    fn talk(&self) {\n        // For example, we can add some quiet contemplation.\n        println!("{} pauses briefly... {}", self.name, self.noise());\n    }\n}\n\nimpl Sheep {\n    fn shear(&mut self) {\n        if self.is_naked() {\n            // Implementor methods can use the implementor\'s trait methods.\n            println!("{} is already naked...", self.name());\n        } else {\n            println!("{} gets a haircut!", self.name);\n\n            self.naked = true;\n        }\n    }\n}\n\nfn main() {\n    // Type annotation is necessary in this case.\n    let mut dolly = Animal::new("Dolly"): Sheep;\n\n    dolly.talk();\n    dolly.shear();\n    dolly.talk();\n}\n')),(0,i.kt)("p",null,"We have a type ",(0,i.kt)("inlineCode",{parentName:"p"},"Sheep"),", a trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal"),", and an implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"Sheep"),".\nAs we can see in ",(0,i.kt)("inlineCode",{parentName:"p"},"main"),", after a trait is implemented for a type, we can use the methods of the trait like normal methods of the type."),(0,i.kt)("h2",{id:"our-translation"},"Our translation"),(0,i.kt)("p",null,"Rust notion of trait is very similar to the concept of ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Type_class"},"typeclasses")," in ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Functional_programming"},"functional programming"),".\nTypeclasses are also present in Coq, so translation of this construction is quite straightforward."),(0,i.kt)("p",null,"For a given trait we create a typeclass with fields being just translated signatures of the methods of the trait.\nTo allow for the use of method syntax, we also define instances of ",(0,i.kt)("inlineCode",{parentName:"p"},"Notation.Dot")," for every method name of the trait.\nWe also add a parameter of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Set")," for every type parameter of the trait and translate trait bounds of the types into equivalent typeclass parameters."),(0,i.kt)("h2",{id:"translation-of-associated-types"},"Translation of associated types"),(0,i.kt)("p",null,"Associated types are a bit harder than methods to translate, because it is possible to use ",(0,i.kt)("inlineCode",{parentName:"p"},"::")," notation to access them.\nFor that purpose, we created another typeclass in ",(0,i.kt)("inlineCode",{parentName:"p"},"Notation")," module:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-coq"},"Class DoubleColonType {Kind : Type} (type : Kind) (name : string) : Type := {\n  double_colon_type : Set;\n}.\n")),(0,i.kt)("p",null,"with a notation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-coq"},'Notation "e1 ::type[ e2 ]" := (Notation.double_colon_type e1 e2)\n  (at level 0).\n')),(0,i.kt)("p",null,"For every associated type, we create a parameter and a field of the typeclass resulting from the trait translation, and below, we create an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Notation.DoubleColonType"),"."),(0,i.kt)("h2",{id:"the-example-in-coq"},"The example in Coq"),(0,i.kt)("p",null,"Here is our Coq translation of the example code above:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-coq"},'(* Generated by coq-of-rust *)\nRequire Import CoqOfRust.CoqOfRust.\n\nModule Sheep.\n  Unset Primitive Projections.\n  Record t : Set := {\n    naked : bool;\n    name : ref str;\n  }.\n  Global Set Primitive Projections.\n\n  Global Instance Get_naked : Notation.Dot "naked" := {\n    Notation.dot \'(Build_t x0 _) := x0;\n  }.\n  Global Instance Get_name : Notation.Dot "name" := {\n    Notation.dot \'(Build_t _ x1) := x1;\n  }.\nEnd Sheep.\nDefinition Sheep : Set := @Sheep.t.\n\nModule Animal.\n  Class Trait (Self : Set) : Set := {\n    new `{H : State.Trait} : (ref str) -> (M (H := H) Self);\n    name `{H : State.Trait} : (ref Self) -> (M (H := H) (ref str));\n    noise `{H : State.Trait} : (ref Self) -> (M (H := H) (ref str));\n  }.\n\n  Global Instance Method_new `{H : State.Trait} `(Trait)\n    : Notation.Dot "new" := {\n    Notation.dot := new;\n  }.\n  Global Instance Method_name `{H : State.Trait} `(Trait)\n    : Notation.Dot "name" := {\n    Notation.dot := name;\n  }.\n  Global Instance Method_noise `{H : State.Trait} `(Trait)\n    : Notation.Dot "noise" := {\n    Notation.dot := noise;\n  }.\n  Global Instance Method_talk `{H : State.Trait} `(Trait)\n    : Notation.Dot "talk" := {\n    Notation.dot (self : ref Self):=\n      (let* _ :=\n        let* _ :=\n          let* \u03b10 := self.["name"] in\n          let* \u03b11 := format_argument::["new_display"] (addr_of \u03b10) in\n          let* \u03b12 := self.["noise"] in\n          let* \u03b13 := format_argument::["new_display"] (addr_of \u03b12) in\n          let* \u03b14 :=\n            format_arguments::["new_v1"]\n              (addr_of [ ""; " says "; "\n" ])\n              (addr_of [ \u03b11; \u03b13 ]) in\n          std.io.stdio._print \u03b14 in\n        Pure tt in\n      Pure tt\n      : M (H := H) unit);\n  }.\nEnd Animal.\n\nModule Impl_traits_Sheep.\n  Definition Self := traits.Sheep.\n\n  Definition is_naked `{H : State.Trait} (self : ref Self) : M (H := H) bool :=\n    Pure self.["naked"].\n\n  Global Instance Method_is_naked `{H : State.Trait} :\n    Notation.Dot "is_naked" := {\n    Notation.dot := is_naked;\n  }.\nEnd Impl_traits_Sheep.\n\nModule Impl_traits_Animal_for_traits_Sheep.\n  Definition Self := traits.Sheep.\n\n  Definition new\n      `{H : State.Trait}\n      (name : ref str)\n      : M (H := H) traits.Sheep :=\n    Pure {| traits.Sheep.name := name; traits.Sheep.naked := false; |}.\n\n  Global Instance AssociatedFunction_new `{H : State.Trait} :\n    Notation.DoubleColon Self "new" := {\n    Notation.double_colon := new;\n  }.\n\n  Definition name `{H : State.Trait} (self : ref Self) : M (H := H) (ref str) :=\n    Pure self.["name"].\n\n  Global Instance Method_name `{H : State.Trait} : Notation.Dot "name" := {\n    Notation.dot := name;\n  }.\n\n  Definition noise\n      `{H : State.Trait}\n      (self : ref Self)\n      : M (H := H) (ref str) :=\n    let* \u03b10 := self.["is_naked"] in\n    if (\u03b10 : bool) then\n      Pure "baaaaah?"\n    else\n      Pure "baaaaah!".\n\n  Global Instance Method_noise `{H : State.Trait} : Notation.Dot "noise" := {\n    Notation.dot := noise;\n  }.\n\n  Definition talk `{H : State.Trait} (self : ref Self) : M (H := H) unit :=\n    let* _ :=\n      let* _ :=\n        let* \u03b10 := format_argument::["new_display"] (addr_of self.["name"]) in\n        let* \u03b11 := self.["noise"] in\n        let* \u03b12 := format_argument::["new_display"] (addr_of \u03b11) in\n        let* \u03b13 :=\n          format_arguments::["new_v1"]\n            (addr_of [ ""; " pauses briefly... "; "\n" ])\n            (addr_of [ \u03b10; \u03b12 ]) in\n        std.io.stdio._print \u03b13 in\n      Pure tt in\n    Pure tt.\n\n  Global Instance Method_talk `{H : State.Trait} : Notation.Dot "talk" := {\n    Notation.dot := talk;\n  }.\n\n  Global Instance I : traits.Animal.Trait Self := {\n    traits.Animal.new `{H : State.Trait} := new;\n    traits.Animal.name `{H : State.Trait} := name;\n    traits.Animal.noise `{H : State.Trait} := noise;\n  }.\nEnd Impl_traits_Animal_for_traits_Sheep.\n\nModule Impl_traits_Sheep_3.\n  Definition Self := traits.Sheep.\n\n  Definition shear `{H : State.Trait} (self : mut_ref Self) : M (H := H) unit :=\n    let* \u03b10 := self.["is_naked"] in\n    if (\u03b10 : bool) then\n      let* _ :=\n        let* _ :=\n          let* \u03b10 := self.["name"] in\n          let* \u03b11 := format_argument::["new_display"] (addr_of \u03b10) in\n          let* \u03b12 :=\n            format_arguments::["new_v1"]\n              (addr_of [ ""; " is already naked...\n" ])\n              (addr_of [ \u03b11 ]) in\n          std.io.stdio._print \u03b12 in\n        Pure tt in\n      Pure tt\n    else\n      let* _ :=\n        let* _ :=\n          let* \u03b10 := format_argument::["new_display"] (addr_of self.["name"]) in\n          let* \u03b11 :=\n            format_arguments::["new_v1"]\n              (addr_of [ ""; " gets a haircut!\n" ])\n              (addr_of [ \u03b10 ]) in\n          std.io.stdio._print \u03b11 in\n        Pure tt in\n      let* _ := assign self.["naked"] true in\n      Pure tt.\n\n  Global Instance Method_shear `{H : State.Trait} : Notation.Dot "shear" := {\n    Notation.dot := shear;\n  }.\nEnd Impl_traits_Sheep_3.\n\n(* #[allow(dead_code)] - function was ignored by the compiler *)\nDefinition main `{H : State.Trait} : M (H := H) unit :=\n  let* dolly :=\n    let* \u03b10 := traits.Animal.new "Dolly" in\n    Pure (\u03b10 : traits.Sheep) in\n  let* _ := dolly.["talk"] in\n  let* _ := dolly.["shear"] in\n  let* _ := dolly.["talk"] in\n  Pure tt.\n')),(0,i.kt)("p",null,"As we can see, the trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal")," is translated to a module ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal"),". Every time we want to refer to the trait we use the name ",(0,i.kt)("inlineCode",{parentName:"p"},"Trait")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal.Trait"),", depending on whether we do it inside or outside its module."),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"Traits are similar enough to Coq classes to make the translation relatively intuitive.\nThe only hard case is a translation of associated types, for which we need a special notation."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Contact")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you have a Rust codebase that you wish to formally verify, or need advice in your work, contact us at","\xa0",(0,i.kt)("a",{parentName:"p",href:"mailto:contact@formal.land"},"c","o","n","t","a","c","t","@","formal",".","l","a","n","d"),". We will be happy to set up a call with you."))))}u.isMDXComponent=!0}}]);