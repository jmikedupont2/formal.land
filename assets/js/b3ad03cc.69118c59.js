"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[2176],{9772:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>n,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(4848),a=t(8453);const i={title:"Latest blog posts on our formal verification effort on Tezos",tags:["coq-tezos-of-ocaml","Tezos","coq-of-ocaml"]},s=void 0,l={permalink:"/blog/2022/12/13/latest-blog-posts-on-tezos",source:"@site/blog/2022-12-13-latest-blog-posts-on-tezos.md",title:"Latest blog posts on our formal verification effort on Tezos",description:"Here we recall some blog articles that we have written since this summer, on the formal verification of the protocol of Tezos. For this project, we are verifying a code base of around 100,000 lines of OCaml code. We automatically convert the OCaml code to the proof system Coq using the converter coq-of-ocaml. We then apply various proof techniques to make sure that the protocol of Tezos does not contain bugs.",date:"2022-12-13T00:00:00.000Z",formattedDate:"December 13, 2022",tags:[{label:"coq-tezos-of-ocaml",permalink:"/blog/tags/coq-tezos-of-ocaml"},{label:"Tezos",permalink:"/blog/tags/tezos"},{label:"coq-of-ocaml",permalink:"/blog/tags/coq-of-ocaml"}],readingTime:1.755,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Latest blog posts on our formal verification effort on Tezos",tags:["coq-tezos-of-ocaml","Tezos","coq-of-ocaml"]},unlisted:!1,prevItem:{title:"Current formal verification efforts \ud83d\udcaa",permalink:"/blog/2023/01/24/current-verification-efforts"},nextItem:{title:"Upgrade coq-of-ocaml to OCaml 4.14",permalink:"/blog/2022/06/23/upgrade-coq-of-ocaml-4.14"}},n={authorsImageUrls:[]},c=[{value:"Blog articles \ud83d\udcdd",id:"blog-articles-",level:2}];function f(e){const o={a:"a",em:"em",h2:"h2",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(o.p,{children:["Here we recall some blog articles that we have written since this summer, on the ",(0,r.jsx)(o.a,{href:"https://formal-land.gitlab.io/coq-tezos-of-ocaml/",children:"formal verification of the protocol of Tezos"}),". For this project, we are verifying a code base of around 100,000 lines of OCaml code. We automatically convert the OCaml code to the proof system Coq using the converter ",(0,r.jsx)(o.a,{href:"https://github.com/formal-land/coq-of-ocaml",children:"coq-of-ocaml"}),". We then apply various proof techniques to make sure that the protocol of Tezos does not contain bugs."]}),"\n",(0,r.jsx)(o.h2,{id:"blog-articles-",children:"Blog articles \ud83d\udcdd"}),"\n",(0,r.jsx)(o.p,{children:"Here is the list of articles about the work we have done since this summer. We believe that some of this work is very unique and specific to Tezos."}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.a,{href:"https://formal-land.gitlab.io/coq-tezos-of-ocaml/blog/2022/12/12/internal-errors-step-by-step/",children:"The error monad, internal errors and validity predicates, step-by-step"})," by ",(0,r.jsx)(o.em,{children:"Pierre Vial"}),": a detailed explanation of what we are doing to verify the absence of unexpected errors in the whole code base;"]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.a,{href:"https://formal-land.gitlab.io/coq-tezos-of-ocaml/blog/2022/10/18/absence-of-internal-errors/",children:"Absence of internal errors"})," by ",(0,r.jsx)(o.em,{children:"Guillaume Claret"}),": the current state of our proofs to verify the absence of unexpected errors;"]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.a,{href:"https://formal-land.gitlab.io/coq-tezos-of-ocaml/blog/2022/10/03/verifying-the-skip-list-inductive-predicates/",children:"Skip-list verification. Using inductive predicates"})," by ",(0,r.jsx)(o.em,{children:"Bart\u0142omiej Kr\xf3likowski"})," and ",(0,r.jsx)(o.em,{children:"Natalie Klaus"}),": a presentation of our verification effort on the skip-list algorithm implementation (part 2);"]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.a,{href:"https://formal-land.gitlab.io/coq-tezos-of-ocaml/blog/2022/10/03/verifying-the-skip-list/",children:"Verifying the skip-list"})," by ",(0,r.jsx)(o.em,{children:"Natalie Klaus"})," and ",(0,r.jsx)(o.em,{children:"Bart\u0142omiej Kr\xf3likowski"}),": a presentation of our verification effort on the skip-list algorithm implementation (part 1);"]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.a,{href:"https://formal-land.gitlab.io/coq-tezos-of-ocaml/blog/2022/08/15/verify-json-data-encoding/",children:"Verifying json-data-encoding"})," by ",(0,r.jsx)(o.em,{children:"Tait van Strien"}),": our work to verify an external library used by the Tezos protocol, to safely serialize data to JSON values;"]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.a,{href:"https://formal-land.gitlab.io/coq-tezos-of-ocaml/blog/2022/07/19/fixing-proofs/",children:"Fixing reused proofs"})," by ",(0,r.jsx)(o.em,{children:"Bart\u0142omiej Kr\xf3likowski"}),": a presentation, with examples, of the work we do to maintain existing proofs and specifications as the code evolves;"]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.a,{href:"https://formal-land.gitlab.io/coq-tezos-of-ocaml/blog/2022/06/07/formal-verification-of-property-based-tests/",children:"Formal verification of property based tests"})," by ",(0,r.jsx)(o.em,{children:"Guillaume Claret"}),": the principle and status of our work to formally verify the generalized case of property-based tests;"]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.a,{href:"https://formal-land.gitlab.io/coq-tezos-of-ocaml/blog/2022/06/02/plan-backward-compatibility",children:"Plan for backward compatibility verification"})," by ",(0,r.jsx)(o.em,{children:"Guillaume Claret"}),": an explanation of the strategy we use to show that two successive versions of the Tezos protocol are fully backward compatible."]}),"\n"]}),"\n",(0,r.jsxs)(o.p,{children:["To follow more of our activity, feel free to register on our ",(0,r.jsx)(o.a,{href:"https://twitter.com/LandFoobar",children:"Twitter account \ud83d\udc26"}),"! If you need services or advices to formally verify your code base, you can drop us an ",(0,r.jsx)(o.a,{href:"mailto:contact@formal.land",children:"email \ud83d\udce7"}),"!"]})]})}function h(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>s,x:()=>l});var r=t(6540);const a={},i=r.createContext(a);function s(e){const o=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:o},e.children)}}}]);