"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[7175],{9145:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var o=t(4848),s=t(8453);const a={title:"Representation of Rust methods in Coq",tags:["coq-of-rust","Rust","Coq"]},i=void 0,r={permalink:"/blog/2023/04/26/representation-of-rust-methods-in-coq",source:"@site/blog/2023-04-26-representation-of-rust-methods-in-coq.md",title:"Representation of Rust methods in Coq",description:"With our project coq-of-rust we aim to translate high-level Rust code to similar-looking Coq code, to formally verify Rust programs. One of the important constructs in the Rust language is the method syntax. In this post, we present our technique to translate Rust methods using type-classes in Coq.",date:"2023-04-26T00:00:00.000Z",formattedDate:"April 26, 2023",tags:[{label:"coq-of-rust",permalink:"/blog/tags/coq-of-rust"},{label:"Rust",permalink:"/blog/tags/rust"},{label:"Coq",permalink:"/blog/tags/coq"}],readingTime:4.57,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Representation of Rust methods in Coq",tags:["coq-of-rust","Rust","Coq"]},unlisted:!1,prevItem:{title:"Monad for side effects in Rust",permalink:"/blog/2023/05/28/monad-for-side-effects-in-rust"},nextItem:{title:"Current formal verification efforts \ud83d\udcaa",permalink:"/blog/2023/01/24/current-verification-efforts"}},c={authorsImageUrls:[]},l=[{value:"Rust Code To Translate",id:"rust-code-to-translate",level:2},{value:"Our Translation",id:"our-translation",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Other Use Cases",id:"other-use-cases",level:2},{value:"In Conclusion",id:"in-conclusion",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["With our project ",(0,o.jsx)(n.a,{href:"https://github.com/formal-land/coq-of-rust",children:"coq-of-rust"})," we aim to translate high-level Rust code to similar-looking ",(0,o.jsx)(n.a,{href:"https://coq.inria.fr/",children:"Coq"})," code, to ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Formal_verification",children:"formally verify"})," Rust programs. One of the important constructs in the Rust language is the ",(0,o.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch05-03-method-syntax.html",children:"method syntax"}),". In this post, we present our technique to translate Rust methods using type-classes in Coq."]}),"\n",(0,o.jsx)(n.h2,{id:"rust-code-to-translate",children:"Rust Code To Translate"}),"\n",(0,o.jsxs)(n.p,{children:["Consider the following Rust example, which contains a method (adapted from the ",(0,o.jsx)(n.a,{href:"https://doc.rust-lang.org/book/",children:"Rust Book"}),"):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'struct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    // Here "area" is a method\n    fn area(&self) -> u32 {\n        self.width * self.height\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        "The area of the rectangle is {} square pixels.",\n        // We are calling this method there\n        rect1.area()\n    );\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The Rust compiler can find the implementation of the ",(0,o.jsx)(n.code,{children:".area()"})," method call because it knows that the type of ",(0,o.jsx)(n.code,{children:"rect1"})," is ",(0,o.jsx)(n.code,{children:"Rectangle"}),". There could be other ",(0,o.jsx)(n.code,{children:"area"})," methods defined for different types, and the code would still compile calling the ",(0,o.jsx)(n.code,{children:"area"})," method of ",(0,o.jsx)(n.code,{children:"Rectangle"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Coq has no direct equivalent for calling a function based on its name and type."}),"\n",(0,o.jsx)(n.h2,{id:"our-translation",children:"Our Translation"}),"\n",(0,o.jsx)(n.p,{children:"Here is our Coq translation of the code above:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:' 1: (* Generated by coq-of-rust *)\n 2: Require Import CoqOfRust.CoqOfRust.\n 3:\n 4: Import Root.std.prelude.rust_2015.\n 5:\n 6: Module Rectangle.\n 7:   Record t : Set := {\n 8:     width : u32;\n 9:     height : u32;\n10:   }.\n11:\n12:   Global Instance Get_width : Notation.Dot "width" := {\n13:     Notation.dot \'(Build_t x0 _) := x0;\n14:   }.\n15:   Global Instance Get_height : Notation.Dot "height" := {\n16:     Notation.dot \'(Build_t _ x1) := x1;\n17:   }.\n18: End Rectangle.\n19: Definition Rectangle : Set := Rectangle.t.\n20:\n21: Module ImplRectangle.\n22:   Definition Self := Rectangle.\n23:\n24:   Definition area (self : ref Self) : u32 :=\n25:     self.["width"].["mul"] self.["height"].\n26:\n27:   Global Instance Method_area : Notation.Dot "area" := {\n28:     Notation.dot := area;\n29:   }.\n30: End ImplRectangle.\n31:\n32: Definition main (_ : unit) : unit :=\n33:   let rect1 := {| Rectangle.width := 30; Rectangle.height := 50; |} in\n34:   _crate.io._print\n35:     (_crate.fmt.Arguments::["new_v1"]\n36:       [ "The area of the rectangle is "; " square pixels.\\n" ]\n37:       [ _crate.fmt.ArgumentV1::["new_display"] rect1.["area"] ]) ;;\n38:   tt ;;\n39:   tt.\n'})}),"\n",(0,o.jsxs)(n.p,{children:["On line ",(0,o.jsx)(n.code,{children:"24"})," we define the ",(0,o.jsx)(n.code,{children:"area"})," function. On line ",(0,o.jsx)(n.code,{children:"27"})," we declare that ",(0,o.jsx)(n.code,{children:"area"})," is a method. On line ",(0,o.jsx)(n.code,{children:"37"})," we call the ",(0,o.jsx)(n.code,{children:"area"})," method on ",(0,o.jsx)(n.code,{children:"rect1"})," with:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:'rect1.["area"]\n'})}),"\n",(0,o.jsx)(n.p,{children:"which closely resembles the source Rust code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"rect1.area()\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Coq can automatically find the code of the ",(0,o.jsx)(n.code,{children:"area"})," method to call."]}),"\n",(0,o.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,o.jsx)(n.p,{children:"The code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:'rect1.["area"]\n'})}),"\n",(0,o.jsx)(n.p,{children:"is actually a notation for:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:'Notation.dot "area" rect1\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Then we leverage the inference mechanism of type-classes in Coq to find the code of the ",(0,o.jsx)(n.code,{children:"area"})," method:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:"Module Notation.\n  (** A class to represent the notation [e1.e2]. This is mainly used to call\n      methods, or access to named or indexed fields of structures.\n      The kind is either a string or an integer. *)\n  Class Dot {Kind : Set} (name : Kind) {T : Set} : Set := {\n    dot : T;\n  }.\n  Arguments dot {Kind} name {T Dot}.\nEnd Notation.\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"Dot"})," class has three parameters: ",(0,o.jsx)(n.code,{children:"Kind"}),", ",(0,o.jsx)(n.code,{children:"name"}),", and ",(0,o.jsx)(n.code,{children:"T"}),". ",(0,o.jsx)(n.code,{children:"Kind"})," is the type of the name of the method (generally a string but it could be an integer in rare cases), ",(0,o.jsx)(n.code,{children:"name"})," is the name of the method, and ",(0,o.jsx)(n.code,{children:"T"})," is the type of the method. The ",(0,o.jsx)(n.code,{children:"dot"})," field of the class is the code of the method."]}),"\n",(0,o.jsx)(n.p,{children:"When we define the class instance:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:'27:   Global Instance Method_area : Notation.Dot "area" := {\n28:     Notation.dot := area;\n29:   }.\n'})}),"\n",(0,o.jsxs)(n.p,{children:["we instantiate the class ",(0,o.jsx)(n.code,{children:"Notation.Dot"})," with three parameters:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Kind"})," (inferred) is ",(0,o.jsx)(n.code,{children:"string"})," because the name of the method is a string,"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"name"})," is ",(0,o.jsx)(n.code,{children:'"area"'})," because the name of the method is ",(0,o.jsx)(n.code,{children:"area"}),","]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"T"})," (inferred) is ",(0,o.jsx)(n.code,{children:"ref Rectangle -> u32"})," because the method is declared as ",(0,o.jsx)(n.code,{children:"fn area(&self) -> u32"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Then we define the ",(0,o.jsx)(n.code,{children:"dot"})," field of the class instance to be the ",(0,o.jsx)(n.code,{children:"area"})," function."]}),"\n",(0,o.jsx)(n.p,{children:"When we call:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:'Notation.dot "area" rect1\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Coq will automatically find the class instance ",(0,o.jsx)(n.code,{children:"Method_area"})," because the type of ",(0,o.jsx)(n.code,{children:"rect1"})," is ",(0,o.jsx)(n.code,{children:"Rectangle"})," and the name of the method is ",(0,o.jsx)(n.code,{children:'"area"'}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"other-use-cases",children:"Other Use Cases"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"Dot"})," class is also used to access to named or indexed fields of structures or traits. We use a similar mechanism for associated functions. For example, the Rust code:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"let rect1 = Rectangle::square(3);\n"})}),"\n",(0,o.jsx)(n.p,{children:"is translated to:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:'let rect1 := Rectangle::["square"] 3 in\n'})}),"\n",(0,o.jsxs)(n.p,{children:["with a type-class for the ",(0,o.jsx)(n.code,{children:"type::[name]"})," notation as follows:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coq",children:"Module Notation.\n  (** A class to represent associated functions (the notation [e1::e2]). The\n      kind might be [Set] for functions associated to a type,\n      or [Set -> Set] for functions associated to a trait. *)\n  Class DoubleColon {Kind : Type} (type : Kind) (name : string) {T : Set} :\n    Set := {\n    double_colon : T;\n  }.\n  Arguments double_colon {Kind} type name {T DoubleColon}.\nEnd Notation.\n"})}),"\n",(0,o.jsx)(n.h2,{id:"in-conclusion",children:"In Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"The type-classes mechanism of Coq appears flexible enough to represent our current use cases involving methods and associated functions. It remains to be seen whether this approach will suffice for future use cases."}),"\n",(0,o.jsx)(n.admonition,{title:"Contact",type:"tip",children:(0,o.jsxs)(n.p,{children:["If you have a Rust codebase that you wish to formally verify, or need advice in your work, contact us at\xa0",(0,o.jsx)(n.a,{href:"mailto:contact@formal.land",children:"contact@formal.land"}),". We will be happy to set up a call with you."]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var o=t(6540);const s={},a=o.createContext(s);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);