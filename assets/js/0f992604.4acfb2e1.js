"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[2991],{1220:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>n,metadata:()=>s,toc:()=>c});var i=o(4848),r=o(8453);const n={title:"\ud83e\udea8 Coq of Solidity (part 1)",tags:["formal verification","Coq","Solidity","Yul"],authors:[]},a=void 0,s={permalink:"/blog/2024/06/11/coq-of-solidity-1",source:"@site/blog/2024-06-11-coq-of-solidity-1.md",title:"\ud83e\udea8 Coq of Solidity (part 1)",description:"Solidity is the most widely used smart contract language for the Ethereum blockchain. As smart contracts are critical software handling a lot of money, there is a huge interest in finding all possible bugs before putting them into production.",date:"2024-06-11T00:00:00.000Z",formattedDate:"June 11, 2024",tags:[{label:"formal verification",permalink:"/blog/tags/formal-verification"},{label:"Coq",permalink:"/blog/tags/coq"},{label:"Solidity",permalink:"/blog/tags/solidity"},{label:"Yul",permalink:"/blog/tags/yul"}],readingTime:13.22,hasTruncateMarker:!0,authors:[],frontMatter:{title:"\ud83e\udea8 Coq of Solidity (part 1)",tags:["formal verification","Coq","Solidity","Yul"],authors:[]},unlisted:!1,nextItem:{title:"\ud83e\udd84 Software correctness from first principles",permalink:"/blog/2024/06/05/software-correctness-from-first-principles"}},l={authorsImageUrls:[]},c=[];function d(t){const e={a:"a",p:"p",strong:"strong",...(0,r.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.a,{href:"https://soliditylang.org/",children:"Solidity"})," is the most widely used ",(0,i.jsx)(e.strong,{children:"smart contract language"})," for the ",(0,i.jsx)(e.a,{href:"https://ethereum.org/",children:"Ethereum blockchain"}),". As smart contracts are ",(0,i.jsx)(e.strong,{children:"critical software"})," handling a lot of money, there is a huge interest in finding ",(0,i.jsx)(e.strong,{children:"all possible bugs"})," before putting them into production."]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Formal verification"})," is a technique to test a program on all possible entries, even if there are ",(0,i.jsx)(e.strong,{children:"infinite possibilities"}),", thanks to the use of ",(0,i.jsx)(e.strong,{children:"mathematical methods"}),". As such, it appears to be an ideal way to guarantee the absence of bugs in a smart contract. Many companies, like ",(0,i.jsx)(e.a,{href:"https://certora.com/",children:"Certora"})," and ",(0,i.jsx)(e.a,{href:"https://www.certik.io/",children:"CertiK"}),", are already providing formal verification services for Solidity."]}),"\n",(0,i.jsxs)(e.p,{children:["In this blog post, we present our ongoing development of a ",(0,i.jsx)(e.strong,{children:"formal verification tool for Solidity"})," using the ",(0,i.jsx)(e.a,{href:"https://coq.inria.fr/",children:"Coq proof assistant"}),". We show how we translate Solidity code into Coq using the intermediate language ",(0,i.jsx)(e.a,{href:"https://docs.soliditylang.org/en/latest/yul.html",children:"Yul"}),". We explain how we achieved to translate all the examples of the ",(0,i.jsx)(e.a,{href:"https://github.com/ethereum/solidity",children:"Solidity compiler"}),"'s test suite to valid Coq code, the semantics we defined and what remained to be done."]}),"\n",(0,i.jsxs)(e.p,{children:["The code is available under GPLv3 license in our fork of the Solidity compiler at ",(0,i.jsx)(e.a,{href:"https://github.com/formal-land/solidity/pull/3",children:"github.com/formal-land/solidity"}),"."]})]})}function h(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(d,{...t})}):d(t)}},8453:(t,e,o)=>{o.d(e,{R:()=>a,x:()=>s});var i=o(6540);const r={},n=i.createContext(r);function a(t){const e=i.useContext(n);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:a(t.components),i.createElement(n.Provider,{value:e},t.children)}}}]);