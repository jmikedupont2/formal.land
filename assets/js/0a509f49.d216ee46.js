"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[9729],{6052:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=o(4848),n=o(8453);const r={title:"\ud83e\udea8 Coq of Solidity \u2013 part 1",tags:["formal verification","Coq","Solidity","Yul"],authors:[]},s=void 0,a={permalink:"/blog/2024/06/28/coq-of-solidity-1",source:"@site/blog/2024-06-28-coq-of-solidity-1.md",title:"\ud83e\udea8 Coq of Solidity \u2013 part 1",description:"Solidity is the most widely used smart contract language on the blockchain. As smart contracts are critical software handling a lot of money, there is a huge interest in finding all possible bugs before putting them into production.",date:"2024-06-28T00:00:00.000Z",formattedDate:"June 28, 2024",tags:[{label:"formal verification",permalink:"/blog/tags/formal-verification"},{label:"Coq",permalink:"/blog/tags/coq"},{label:"Solidity",permalink:"/blog/tags/solidity"},{label:"Yul",permalink:"/blog/tags/yul"}],readingTime:16.34,hasTruncateMarker:!0,authors:[],frontMatter:{title:"\ud83e\udea8 Coq of Solidity \u2013 part 1",tags:["formal verification","Coq","Solidity","Yul"],authors:[]},unlisted:!1,nextItem:{title:"\ud83e\udd84 Software correctness from first principles",permalink:"/blog/2024/06/05/software-correctness-from-first-principles"}},l={authorsImageUrls:[]},c=[];function h(t){const e={a:"a",admonition:"admonition",code:"code",em:"em",li:"li",ol:"ol",p:"p",strong:"strong",...(0,n.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.a,{href:"https://soliditylang.org/",children:"Solidity"})," is the most widely used ",(0,i.jsx)(e.strong,{children:"smart contract language"})," on the blockchain. As smart contracts are ",(0,i.jsx)(e.strong,{children:"critical software"})," handling a lot of money, there is a huge interest in finding ",(0,i.jsx)(e.strong,{children:"all possible bugs"})," before putting them into production."]}),"\n",(0,i.jsx)(e.admonition,{title:"AlephZero",type:"info",children:(0,i.jsx)(e.p,{children:(0,i.jsxs)(e.em,{children:["We are happy to be working with ",(0,i.jsx)(e.a,{href:"https://alephzero.org/",children:"AlephZero"})," to develop tools to bring more security for the audit of Solidity smart contracts, thanks to the use of formal verification and the interactive theorem prover ",(0,i.jsx)(e.a,{href:"https://coq.inria.fr/",children:"Coq"}),". We thank the Aleph Zero Foundation for their support."]})})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Formal verification"})," is a technique to test a program on all possible entries, even when there are ",(0,i.jsx)(e.strong,{children:"infinitely many"}),". This contrasts with the traditional test techniques, which can only execute a finite set of scenarios. As such, it appears to be an ideal way to bring more security to smart contract audits."]}),"\n",(0,i.jsxs)(e.p,{children:["In this blog post, we present the ",(0,i.jsxs)(e.strong,{children:["formal verification tool ",(0,i.jsx)(e.code,{children:"coq-of-solidity"})]})," that we are developing for Solidity. Its specificities are that:"]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"It is open-source (GPL-3 for the translation, MIT for the proofs)."}),"\n",(0,i.jsx)(e.li,{children:"It uses an interactive theorem prover, the system Coq, to verify arbitrarily complex properties."}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["Here, we present how we translate Solidity code into Coq using the intermediate language ",(0,i.jsx)(e.a,{href:"https://docs.soliditylang.org/en/latest/yul.html",children:"Yul"}),". We explain the semantics we use and what remains to be done."]}),"\n",(0,i.jsxs)(e.p,{children:["The code is available in our fork of the Solidity compiler at ",(0,i.jsx)(e.a,{href:"https://github.com/formal-land/solidity",children:"github.com/formal-land/solidity"}),"."]})]})}function d(t={}){const{wrapper:e}={...(0,n.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(h,{...t})}):h(t)}},8453:(t,e,o)=>{o.d(e,{R:()=>s,x:()=>a});var i=o(6540);const n={},r=i.createContext(n);function s(t){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(n):t.components||n:s(t.components),i.createElement(r.Provider,{value:e},t.children)}}}]);