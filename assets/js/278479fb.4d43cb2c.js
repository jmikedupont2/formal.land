"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[7450],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var o=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=o.createContext({}),c=function(e){var t=o.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(a),h=n,d=u["".concat(s,".").concat(h)]||u[h]||m[h]||r;return a?o.createElement(d,i(i({ref:t},p),{},{components:a})):o.createElement(d,i({ref:t},p))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<r;c++)i[c]=a[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1614:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},assets:function(){return p},toc:function(){return m},default:function(){return h}});var o=a(3117),n=a(102),r=(a(7294),a(3905)),i=["components"],l={title:"Upgrade coq-of-ocaml to OCaml 4.14",authors:["guillaume_claret"],tags:["coq-of-ocaml","ocaml",4.14]},s=void 0,c={permalink:"/blog/2022/06/23/upgrade-coq-of-ocaml-4.14",source:"@site/blog/2022-06-23-upgrade-coq-of-ocaml-4.14.md",title:"Upgrade coq-of-ocaml to OCaml 4.14",description:"In an effort to support the latest version of the protocol of Tezos we upgraded coq-of-ocaml to add compatibility with OCaml 4.14. The result is available in the branch ocaml-4.14. We describe here how we made this upgrade.",date:"2022-06-23T00:00:00.000Z",formattedDate:"June 23, 2022",tags:[{label:"coq-of-ocaml",permalink:"/blog/tags/coq-of-ocaml"},{label:"ocaml",permalink:"/blog/tags/ocaml"},{label:"4.14",permalink:"/blog/tags/4-14"}],readingTime:2.195,truncated:!0,authors:[{name:"Guillaume Claret",url:"https://github.com/clarus",imageURL:"https://github.com/clarus.png",key:"guillaume_claret"}],prevItem:{title:"Latest blog posts on our formal verification effort on Tezos",permalink:"/blog/2022/12/13/latest-blog-posts-on-tezos"},nextItem:{title:"Status update on the verification of Tezos",permalink:"/blog/2022/06/15/status update-tezos"}},p={authorsImageUrls:[void 0]},m=[{value:"Usage of Merlin",id:"usage-of-merlin",children:[],level:2},{value:"Upgrade",id:"upgrade",children:[],level:2},{value:"Git submodule or copy &amp; paste?",id:"git-submodule-or-copy--paste",children:[],level:2},{value:"Next",id:"next",children:[],level:2}],u={toc:m};function h(e){var t=e.components,a=(0,n.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In an effort to support the latest version of the ",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.com/tezos/tezos/-/tree/master/src/proto_alpha/lib_protocol"},"protocol of Tezos")," we upgraded ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/formal-land/coq-of-ocaml"},(0,r.kt)("inlineCode",{parentName:"a"},"coq-of-ocaml"))," to add compatibility with OCaml 4.14. The result is available in the branch ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/formal-land/coq-of-ocaml/pull/217"},(0,r.kt)("inlineCode",{parentName:"a"},"ocaml-4.14")),". We describe here how we made this upgrade."),(0,r.kt)("h2",{id:"usage-of-merlin"},"Usage of Merlin"),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"coq-of-ocaml")," we are using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ocaml/merlin"},"Merlin")," to get the typed ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Abstract_syntax_tree"},"abstract syntax tree")," of OCaml files. We see the AST through the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.mirage.io/ocaml/Typedtree/index.html"},"Typedtree")," interface, together with an access to all the definitions of the current compilation environment. Merlin computes the current environment by understanding how an OCaml project is configured and connecting to the ",(0,r.kt)("a",{parentName:"p",href:"https://dune.build/"},"dune")," build system. The environment is mandatory for certain transformations in ",(0,r.kt)("inlineCode",{parentName:"p"},"coq-of-ocaml"),", like:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"finding a canonical name for module types;"),(0,r.kt)("li",{parentName:"ul"},"propagating phantom types.")),(0,r.kt)("p",null,"In order to use Merlin as a library (rather than as a daemon), we vendor the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rgrinberg/merlin/tree/lsp"},"LSP version")," of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rgrinberg"},"rgrinberg")," in the folder ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/formal-land/coq-of-ocaml/tree/master/vendor"},(0,r.kt)("inlineCode",{parentName:"a"},"vendor/")),". This vendored version works with no extra configurations."),(0,r.kt)("h2",{id:"upgrade"},"Upgrade"),(0,r.kt)("p",null,"When a new version of OCaml is out, we upgrade our vendored version of Merlin to a compatible one. Then we do the necessary changes to ",(0,r.kt)("inlineCode",{parentName:"p"},"coq-of-ocaml"),", as the interface of the AST generally evolves with small changes. For OCaml 4.14, the main change was some types becoming abstract such as ",(0,r.kt)("inlineCode",{parentName:"p"},"Types.type_expr"),". To access to the fields of these types, we now need to use a specific getter and do changes such as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"+    match typ.desc with\n-    match Types.get_desc typ with\n")),(0,r.kt)("p",null,"This made some patterns in ",(0,r.kt)("inlineCode",{parentName:"p"},"match")," expressions more complex, but otherwise the changes were very minimal. We ran all the unit-tests of ",(0,r.kt)("inlineCode",{parentName:"p"},"coq-of-ocaml")," after the upgrade and they were still valid."),(0,r.kt)("h2",{id:"git-submodule-or-copy--paste"},"Git submodule or copy & paste?"),(0,r.kt)("p",null,"To vendor Merlin we have two possibilities:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Using a ",(0,r.kt)("a",{parentName:"li",href:"https://git-scm.com/book/en/v2/Git-Tools-Submodules"},"Git submodule"),"."),(0,r.kt)("li",{parentName:"ol"},"Doing a copy & paste of the code.")),(0,r.kt)("p",null,"The first possibility is more efficient in terms of space, but there are a few disadvantages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"we cannot make small modifications if needed;"),(0,r.kt)("li",{parentName:"ul"},"the archives generated by Github do not contain the code of the submodules (see this ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/dear-github/dear-github/issues/214"},"issue"),")"),(0,r.kt)("li",{parentName:"ul"},"if a commit in the repository for the submodule disappears, then the submodule is unusable.")),(0,r.kt)("p",null,"The last reason forced us to do a copy & paste for OCaml 4.14. We now have to be cautious not to commit the generate ",(0,r.kt)("inlineCode",{parentName:"p"},".ml")," file for the OCaml parser."),(0,r.kt)("h2",{id:"next"},"Next"),(0,r.kt)("p",null,"The next change will be doing the upgrade to OCaml 5. There should be much more changes, and in particular a new way of handling the effects. We do not know yet if it will be possible to translate the effect handlers to Coq in a nice way."))}h.isMDXComponent=!0}}]);