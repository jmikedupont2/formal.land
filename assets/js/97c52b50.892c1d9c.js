"use strict";(self.webpackChunkformal_land=self.webpackChunkformal_land||[]).push([[7580],{3922:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>c,contentTitle:()=>n,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=o(4848),s=o(8453);const a={title:"Translating Rust match patterns to Coq with coq-of-rust",tags:["coq-of-rust","Rust","Coq","Aleph-Zero"],authors:[]},n=void 0,i={permalink:"/blog/2024/01/04/rust-translating-match",source:"@site/blog/2024-01-04-rust-translating-match.md",title:"Translating Rust match patterns to Coq with coq-of-rust",description:"Our tool coq-of-rust enables formal verification of \ud83e\udd80&nbsp;Rust code to make sure that a program has no bugs. This technique checks all possible execution paths using mathematical techniques. This is important for example to ensure the security of smart contracts written in Rust language.",date:"2024-01-04T00:00:00.000Z",formattedDate:"January 4, 2024",tags:[{label:"coq-of-rust",permalink:"/blog/tags/coq-of-rust"},{label:"Rust",permalink:"/blog/tags/rust"},{label:"Coq",permalink:"/blog/tags/coq"},{label:"Aleph-Zero",permalink:"/blog/tags/aleph-zero"}],readingTime:6.005,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Translating Rust match patterns to Coq with coq-of-rust",tags:["coq-of-rust","Rust","Coq","Aleph-Zero"],authors:[]},unlisted:!1,prevItem:{title:"Upgrade the Rust version of coq-of-rust",permalink:"/blog/2024/01/18/update-coq-of-rust"},nextItem:{title:"Verifying an ERC-20 smart contract in Rust",permalink:"/blog/2023/12/13/rust-verify-erc-20-smart-contract"}},c={authorsImageUrls:[]},l=[];function u(t){const e={a:"a",code:"code",p:"p",...(0,s.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:["Our tool ",(0,r.jsx)(e.a,{href:"https://github.com/formal-land/coq-of-rust",children:"coq-of-rust"})," enables ",(0,r.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Formal_verification",children:"formal verification"})," of ",(0,r.jsx)(e.a,{href:"https://www.rust-lang.org/",children:"\ud83e\udd80\xa0Rust"})," code to make sure that a program has no bugs. This technique checks all possible execution paths using mathematical techniques. This is important for example to ensure the security of smart contracts written in Rust language."]}),"\n",(0,r.jsxs)(e.p,{children:["Our tool ",(0,r.jsx)(e.code,{children:"coq-of-rust"})," works by translating Rust programs to the general proof system ",(0,r.jsx)(e.a,{href:"https://coq.inria.fr/",children:"\ud83d\udc13\xa0Coq"}),". Here we explain how we translate",(0,r.jsxs)(e.a,{href:"https://doc.rust-lang.org/book/ch06-02-match.html",children:["\xa0",(0,r.jsx)(e.code,{children:"match"})," patterns"]})," from Rust to Coq. The specificity of Rust patterns is to be able to match values either by value or reference."]})]})}function h(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(u,{...t})}):u(t)}},8453:(t,e,o)=>{o.d(e,{R:()=>n,x:()=>i});var r=o(6540);const s={},a=r.createContext(s);function n(t){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:n(t.components),r.createElement(a.Provider,{value:e},t.children)}}}]);